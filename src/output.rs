/* automatically generated by rust-bindgen 0.57.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 110100;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const __HAS_FIXED_CHK_PROTOTYPES: u32 = 1;
pub const CST_WRONG_FORMAT: i32 = -2;
pub const CST_ERROR_FORMAT: i32 = -1;
pub const CST_OK_FORMAT: u32 = 0;
pub const RENAME_SECLUDE: u32 = 1;
pub const RENAME_SWAP: u32 = 2;
pub const RENAME_EXCL: u32 = 4;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SMOD: u32 = 8192;
pub const __SALC: u32 = 16384;
pub const __SIGN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const P_tmpdir: &'static [u8; 10usize] = b"/var/tmp/\0";
pub const L_tmpnam: u32 = 1024;
pub const TMP_MAX: u32 = 308915776;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const L_ctermid: u32 = 1024;
pub const CST_OPEN_WRITE: u32 = 1;
pub const CST_OPEN_READ: u32 = 2;
pub const CST_OPEN_APPEND: u32 = 4;
pub const CST_OPEN_BINARY: u32 = 8;
pub const CST_SEEK_ABSOLUTE: u32 = 0;
pub const CST_SEEK_RELATIVE: u32 = 1;
pub const CST_SEEK_ENDREL: u32 = 2;
pub const CST_REGMAGIC: u32 = 156;
pub const CST_NSUBEXP: u32 = 10;
pub const CST_RX_dotted_abbrev_NUM: u32 = 0;
pub const __DARWIN_NSIG: u32 = 32;
pub const NSIG: u32 = 32;
pub const _ARM_SIGNAL_: u32 = 1;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGEMT: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGIO: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGINFO: u32 = 29;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const __DARWIN_OPAQUE_ARM_THREAD_STATE64: u32 = 0;
pub const SIGEV_NONE: u32 = 0;
pub const SIGEV_SIGNAL: u32 = 1;
pub const SIGEV_THREAD: u32 = 3;
pub const ILL_NOOP: u32 = 0;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLTRP: u32 = 2;
pub const ILL_PRVOPC: u32 = 3;
pub const ILL_ILLOPN: u32 = 4;
pub const ILL_ILLADR: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const FPE_NOOP: u32 = 0;
pub const FPE_FLTDIV: u32 = 1;
pub const FPE_FLTOVF: u32 = 2;
pub const FPE_FLTUND: u32 = 3;
pub const FPE_FLTRES: u32 = 4;
pub const FPE_FLTINV: u32 = 5;
pub const FPE_FLTSUB: u32 = 6;
pub const FPE_INTDIV: u32 = 7;
pub const FPE_INTOVF: u32 = 8;
pub const SEGV_NOOP: u32 = 0;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const BUS_NOOP: u32 = 0;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const CLD_NOOP: u32 = 0;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const SA_ONSTACK: u32 = 1;
pub const SA_RESTART: u32 = 2;
pub const SA_RESETHAND: u32 = 4;
pub const SA_NOCLDSTOP: u32 = 8;
pub const SA_NODEFER: u32 = 16;
pub const SA_NOCLDWAIT: u32 = 32;
pub const SA_SIGINFO: u32 = 64;
pub const SA_USERTRAMP: u32 = 256;
pub const SA_64REGSET: u32 = 512;
pub const SA_USERSPACE_MASK: u32 = 127;
pub const SIG_BLOCK: u32 = 1;
pub const SIG_UNBLOCK: u32 = 2;
pub const SIG_SETMASK: u32 = 3;
pub const SI_USER: u32 = 65537;
pub const SI_QUEUE: u32 = 65538;
pub const SI_TIMER: u32 = 65539;
pub const SI_ASYNCIO: u32 = 65540;
pub const SI_MESGQ: u32 = 65541;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 4;
pub const MINSIGSTKSZ: u32 = 32768;
pub const SIGSTKSZ: u32 = 131072;
pub const SV_ONSTACK: u32 = 1;
pub const SV_INTERRUPT: u32 = 2;
pub const SV_RESETHAND: u32 = 4;
pub const SV_NODEFER: u32 = 16;
pub const SV_NOCLDSTOP: u32 = 8;
pub const SV_SIGINFO: u32 = 64;
pub const __WORDSIZE: u32 = 64;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const PRIO_PROCESS: u32 = 0;
pub const PRIO_PGRP: u32 = 1;
pub const PRIO_USER: u32 = 2;
pub const PRIO_DARWIN_THREAD: u32 = 3;
pub const PRIO_DARWIN_PROCESS: u32 = 4;
pub const PRIO_MIN: i32 = -20;
pub const PRIO_MAX: u32 = 20;
pub const PRIO_DARWIN_BG: u32 = 4096;
pub const PRIO_DARWIN_NONUI: u32 = 4097;
pub const RUSAGE_SELF: u32 = 0;
pub const RUSAGE_CHILDREN: i32 = -1;
pub const RUSAGE_INFO_V0: u32 = 0;
pub const RUSAGE_INFO_V1: u32 = 1;
pub const RUSAGE_INFO_V2: u32 = 2;
pub const RUSAGE_INFO_V3: u32 = 3;
pub const RUSAGE_INFO_V4: u32 = 4;
pub const RUSAGE_INFO_V5: u32 = 5;
pub const RUSAGE_INFO_CURRENT: u32 = 5;
pub const RU_PROC_RUNS_RESLIDE: u32 = 1;
pub const RLIMIT_CPU: u32 = 0;
pub const RLIMIT_FSIZE: u32 = 1;
pub const RLIMIT_DATA: u32 = 2;
pub const RLIMIT_STACK: u32 = 3;
pub const RLIMIT_CORE: u32 = 4;
pub const RLIMIT_AS: u32 = 5;
pub const RLIMIT_RSS: u32 = 5;
pub const RLIMIT_MEMLOCK: u32 = 6;
pub const RLIMIT_NPROC: u32 = 7;
pub const RLIMIT_NOFILE: u32 = 8;
pub const RLIM_NLIMITS: u32 = 9;
pub const _RLIMIT_POSIX_FLAG: u32 = 4096;
pub const RLIMIT_WAKEUPS_MONITOR: u32 = 1;
pub const RLIMIT_CPU_USAGE_MONITOR: u32 = 2;
pub const RLIMIT_THREAD_CPULIMITS: u32 = 3;
pub const RLIMIT_FOOTPRINT_INTERVAL: u32 = 4;
pub const WAKEMON_ENABLE: u32 = 1;
pub const WAKEMON_DISABLE: u32 = 2;
pub const WAKEMON_GET_PARAMS: u32 = 4;
pub const WAKEMON_SET_DEFAULTS: u32 = 8;
pub const WAKEMON_MAKE_FATAL: u32 = 16;
pub const CPUMON_MAKE_FATAL: u32 = 4096;
pub const FOOTPRINT_INTERVAL_RESET: u32 = 1;
pub const IOPOL_TYPE_DISK: u32 = 0;
pub const IOPOL_TYPE_VFS_ATIME_UPDATES: u32 = 2;
pub const IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES: u32 = 3;
pub const IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME: u32 = 4;
pub const IOPOL_TYPE_VFS_TRIGGER_RESOLVE: u32 = 5;
pub const IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION: u32 = 6;
pub const IOPOL_SCOPE_PROCESS: u32 = 0;
pub const IOPOL_SCOPE_THREAD: u32 = 1;
pub const IOPOL_SCOPE_DARWIN_BG: u32 = 2;
pub const IOPOL_DEFAULT: u32 = 0;
pub const IOPOL_IMPORTANT: u32 = 1;
pub const IOPOL_PASSIVE: u32 = 2;
pub const IOPOL_THROTTLE: u32 = 3;
pub const IOPOL_UTILITY: u32 = 4;
pub const IOPOL_STANDARD: u32 = 5;
pub const IOPOL_APPLICATION: u32 = 5;
pub const IOPOL_NORMAL: u32 = 1;
pub const IOPOL_ATIME_UPDATES_DEFAULT: u32 = 0;
pub const IOPOL_ATIME_UPDATES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT: u32 = 0;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_ON: u32 = 2;
pub const IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT: u32 = 0;
pub const IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME: u32 = 1;
pub const IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_TRIGGER_RESOLVE_OFF: u32 = 1;
pub const IOPOL_VFS_CONTENT_PROTECTION_DEFAULT: u32 = 0;
pub const IOPOL_VFS_CONTENT_PROTECTION_IGNORE: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WCOREFLAG: u32 = 128;
pub const _WSTOPPED: u32 = 127;
pub const WEXITED: u32 = 4;
pub const WSTOPPED: u32 = 8;
pub const WCONTINUED: u32 = 16;
pub const WNOWAIT: u32 = 32;
pub const WAIT_ANY: i32 = -1;
pub const WAIT_MYPGRP: u32 = 0;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
pub const _JBLEN: u32 = 48;
pub const CST_VAL_TYPE_CONS: u32 = 0;
pub const CST_VAL_TYPE_INT: u32 = 1;
pub const CST_VAL_TYPE_FLOAT: u32 = 3;
pub const CST_VAL_TYPE_STRING: u32 = 5;
pub const CST_VAL_TYPE_FIRST_FREE: u32 = 7;
pub const CST_VAL_TYPE_MAX: u32 = 54;
pub const CST_CONST_INT_MAX: u32 = 19;
pub const BYTE_ORDER_BIG: &'static [u8; 3usize] = b"10\0";
pub const BYTE_ORDER_LITTLE: &'static [u8; 3usize] = b"01\0";
pub const RIFF_FORMAT_PCM: u32 = 1;
pub const RIFF_FORMAT_ADPCM: u32 = 2;
pub const RIFF_FORMAT_MULAW: u32 = 6;
pub const RIFF_FORMAT_ALAW: u32 = 7;
pub const CST_SND_ULAW: u32 = 1;
pub const CST_SND_UCHAR: u32 = 2;
pub const CST_SND_SHORT: u32 = 3;
pub const CST_G721_LEADIN: u32 = 8;
pub const CST_CART_OP_NONE: u32 = 255;
pub const CST_CART_OP_LEAF: u32 = 255;
pub const CST_CART_OP_IS: u32 = 0;
pub const CST_CART_OP_IN: u32 = 1;
pub const CST_CART_OP_LESS: u32 = 2;
pub const CST_CART_OP_GREATER: u32 = 3;
pub const CST_CART_OP_MATCHES: u32 = 4;
pub const CST_CART_OP_EQUALS: u32 = 5;
pub const CST_LTS_EOR: u32 = 255;
pub const CST_AUDIOBUFFSIZE: u32 = 128;
pub const CST_AUDIO_DEFAULT_PORT: u32 = 1746;
pub const CST_AUDIO_DEFAULT_SERVER: &'static [u8; 10usize] = b"localhost\0";
pub const CST_AUDIO_DEFAULT_ENCODING: &'static [u8; 6usize] = b"short\0";
pub const CST_AUDIO_STREAM_STOP: i32 = -1;
pub const CST_AUDIO_STREAM_CONT: u32 = 0;
pub const TS_CHARCLASS_NONE: u32 = 0;
pub const TS_CHARCLASS_WHITESPACE: u32 = 2;
pub const TS_CHARCLASS_SINGLECHAR: u32 = 4;
pub const TS_CHARCLASS_PREPUNCT: u32 = 8;
pub const TS_CHARCLASS_POSTPUNCT: u32 = 16;
pub const TS_CHARCLASS_QUOTE: u32 = 32;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__mbstate8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>()))._mbstateL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__arg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__next as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_t>())).__cleanup_stack as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__opaque as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type size_t = __darwin_size_t;
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __b: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strncat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtok_r(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
        __lasts: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __strerrbuf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strdup(__s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memccpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn stpcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __s1: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(__s1: *const ::std::os::raw::c_char, __n: size_t) -> size_t;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::std::os::raw::c_int;
extern "C" {
    pub fn memset_s(
        __s: *mut ::std::os::raw::c_void,
        __smax: rsize_t,
        __c: ::std::os::raw::c_int,
        __n: rsize_t,
    ) -> errno_t;
}
pub type ssize_t = __darwin_ssize_t;
extern "C" {
    pub fn memmem(
        __big: *const ::std::os::raw::c_void,
        __big_len: size_t,
        __little: *const ::std::os::raw::c_void,
        __little_len: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset_pattern4(
        __b: *mut ::std::os::raw::c_void,
        __pattern4: *const ::std::os::raw::c_void,
        __len: size_t,
    );
}
extern "C" {
    pub fn memset_pattern8(
        __b: *mut ::std::os::raw::c_void,
        __pattern8: *const ::std::os::raw::c_void,
        __len: size_t,
    );
}
extern "C" {
    pub fn memset_pattern16(
        __b: *mut ::std::os::raw::c_void,
        __pattern16: *const ::std::os::raw::c_void,
        __len: size_t,
    );
}
extern "C" {
    pub fn strcasestr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
        __len: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlcat(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strlcpy(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strmode(__mode: ::std::os::raw::c_int, __bp: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ssize_t,
    );
}
extern "C" {
    pub fn timingsafe_bcmp(
        __b1: *const ::std::os::raw::c_void,
        __b2: *const ::std::os::raw::c_void,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strsignal_r(
        __sig: ::std::os::raw::c_int,
        __strsignalbuf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: size_t,
    );
}
extern "C" {
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fls(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
pub type cst_string = ::std::os::raw::c_char;
extern "C" {
    pub fn cst_atof(str_: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn cst_strdup(s: *const cst_string) -> *mut cst_string;
}
extern "C" {
    pub fn cst_strchr(s: *const cst_string, c: ::std::os::raw::c_int) -> *mut cst_string;
}
extern "C" {
    pub fn cst_strrchr(str_: *const cst_string, c: ::std::os::raw::c_int) -> *mut cst_string;
}
extern "C" {
    pub fn cst_member_string(
        str_: *const ::std::os::raw::c_char,
        slist: *const *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cst_substr(
        str_: *const ::std::os::raw::c_char,
        start: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cst_string_before(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cst_strcat(
        a: *const ::std::os::raw::c_char,
        b: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cst_strcat3(
        a: *const ::std::os::raw::c_char,
        b: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cst_downcase(str_: *const cst_string) -> *mut cst_string;
}
extern "C" {
    pub fn cst_upcase(str_: *const cst_string) -> *mut cst_string;
}
pub type va_list = __darwin_va_list;
extern "C" {
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    assert_eq!(
        ::std::mem::size_of::<__sbuf>(),
        16usize,
        concat!("Size of: ", stringify!(__sbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<__sbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(__sbuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sbuf>()))._base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sbuf>()))._size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[test]
fn bindgen_test_layout___sFILE() {
    assert_eq!(
        ::std::mem::size_of::<__sFILE>(),
        152usize,
        concat!("Size of: ", stringify!(__sFILE))
    );
    assert_eq!(
        ::std::mem::align_of::<__sFILE>(),
        8usize,
        concat!("Alignment of ", stringify!(__sFILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._r as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._w as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._file as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._bf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_bf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._lbfsize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lbfsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._cookie as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_cookie)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._close as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._read as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._seek as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._write as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ub as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ub)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._extra as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_extra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ur as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ubuf as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ubuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._nbuf as *const _ as usize },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_nbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._lb as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._blksize as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_offset)
        )
    );
}
pub type FILE = __sFILE;
extern "C" {
    pub static mut __stdinp: *mut FILE;
}
extern "C" {
    pub static mut __stdoutp: *mut FILE;
}
extern "C" {
    pub static mut __stderrp: *mut FILE;
}
extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type off_t = __darwin_off_t;
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
extern "C" {
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ssize_t;
}
extern "C" {
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut size_t,
        __stream: *mut FILE,
    ) -> ssize_t;
}
extern "C" {
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: size_t,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut size_t,
    ) -> *mut FILE;
}
extern "C" {
    pub static sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut size_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __sprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: size_t,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __snprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: size_t,
        arg3: ::std::os::raw::c_int,
        arg4: size_t,
        arg5: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: size_t,
        arg4: *const ::std::os::raw::c_char,
        arg5: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsnprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: size_t,
        arg3: ::std::os::raw::c_int,
        arg4: size_t,
        arg5: *const ::std::os::raw::c_char,
        arg6: va_list,
    ) -> ::std::os::raw::c_int;
}
pub type cst_file = *mut FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cst_filemap_struct {
    pub mem: *mut ::std::os::raw::c_void,
    pub fh: cst_file,
    pub mapsize: size_t,
    pub fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cst_filemap_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_filemap_struct>(),
        32usize,
        concat!("Size of: ", stringify!(cst_filemap_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_filemap_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_filemap_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_filemap_struct>())).mem as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_filemap_struct),
            "::",
            stringify!(mem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_filemap_struct>())).fh as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_filemap_struct),
            "::",
            stringify!(fh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_filemap_struct>())).mapsize as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_filemap_struct),
            "::",
            stringify!(mapsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_filemap_struct>())).fd as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_filemap_struct),
            "::",
            stringify!(fd)
        )
    );
}
pub type cst_filemap = cst_filemap_struct;
extern "C" {
    pub fn cst_fopen(path: *const ::std::os::raw::c_char, mode: ::std::os::raw::c_int) -> cst_file;
}
extern "C" {
    pub fn cst_fwrite(
        fh: cst_file,
        buf: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_long,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn cst_fread(
        fh: cst_file,
        buf: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_long,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn cst_fprintf(
        fh: cst_file,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cst_sprintf(
        s: *mut ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cst_fclose(fh: cst_file) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cst_fgetc(fh: cst_file) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cst_ftell(fh: cst_file) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn cst_fseek(
        fh: cst_file,
        pos: ::std::os::raw::c_long,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn cst_filesize(fh: cst_file) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn cst_mmap_file(path: *const ::std::os::raw::c_char) -> *mut cst_filemap;
}
extern "C" {
    pub fn cst_munmap_file(map: *mut cst_filemap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cst_read_whole_file(path: *const ::std::os::raw::c_char) -> *mut cst_filemap;
}
extern "C" {
    pub fn cst_free_whole_file(map: *mut cst_filemap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cst_read_part_file(path: *const ::std::os::raw::c_char) -> *mut cst_filemap;
}
extern "C" {
    pub fn cst_free_part_file(map: *mut cst_filemap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cst_urlp(url: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cst_url_open(url: *const ::std::os::raw::c_char) -> cst_file;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cst_regex_struct {
    pub regstart: ::std::os::raw::c_char,
    pub reganch: ::std::os::raw::c_char,
    pub regmust: *mut ::std::os::raw::c_char,
    pub regmlen: ::std::os::raw::c_int,
    pub regsize: ::std::os::raw::c_int,
    pub program: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_cst_regex_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_regex_struct>(),
        32usize,
        concat!("Size of: ", stringify!(cst_regex_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_regex_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_regex_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_regex_struct>())).regstart as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_regex_struct),
            "::",
            stringify!(regstart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_regex_struct>())).reganch as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_regex_struct),
            "::",
            stringify!(reganch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_regex_struct>())).regmust as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_regex_struct),
            "::",
            stringify!(regmust)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_regex_struct>())).regmlen as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_regex_struct),
            "::",
            stringify!(regmlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_regex_struct>())).regsize as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_regex_struct),
            "::",
            stringify!(regsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_regex_struct>())).program as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_regex_struct),
            "::",
            stringify!(program)
        )
    );
}
pub type cst_regex = cst_regex_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cst_regstate_struct {
    pub startp: [*const ::std::os::raw::c_char; 10usize],
    pub endp: [*const ::std::os::raw::c_char; 10usize],
    pub input: *const ::std::os::raw::c_char,
    pub bol: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_cst_regstate_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_regstate_struct>(),
        176usize,
        concat!("Size of: ", stringify!(cst_regstate_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_regstate_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_regstate_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_regstate_struct>())).startp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_regstate_struct),
            "::",
            stringify!(startp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_regstate_struct>())).endp as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_regstate_struct),
            "::",
            stringify!(endp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_regstate_struct>())).input as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_regstate_struct),
            "::",
            stringify!(input)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_regstate_struct>())).bol as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_regstate_struct),
            "::",
            stringify!(bol)
        )
    );
}
pub type cst_regstate = cst_regstate_struct;
extern "C" {
    pub fn new_cst_regex(str_: *const ::std::os::raw::c_char) -> *mut cst_regex;
}
extern "C" {
    pub fn delete_cst_regex(r: *mut cst_regex);
}
extern "C" {
    pub fn cst_regex_match(
        r: *const cst_regex,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cst_regex_match_return(
        r: *const cst_regex,
        str_: *const ::std::os::raw::c_char,
    ) -> *mut cst_regstate;
}
extern "C" {
    pub fn hs_regcomp(arg1: *const ::std::os::raw::c_char) -> *mut cst_regex;
}
extern "C" {
    pub fn hs_regexec(
        arg1: *const cst_regex,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut cst_regstate;
}
extern "C" {
    pub fn hs_regdelete(arg1: *mut cst_regex);
}
extern "C" {
    pub fn cst_regsub(
        r: *const cst_regstate,
        in_: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_char,
        max: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn cst_regex_init();
}
extern "C" {
    pub static cst_rx_white: *const cst_regex;
}
extern "C" {
    pub static cst_rx_alpha: *const cst_regex;
}
extern "C" {
    pub static cst_rx_uppercase: *const cst_regex;
}
extern "C" {
    pub static cst_rx_lowercase: *const cst_regex;
}
extern "C" {
    pub static cst_rx_alphanum: *const cst_regex;
}
extern "C" {
    pub static cst_rx_identifier: *const cst_regex;
}
extern "C" {
    pub static cst_rx_int: *const cst_regex;
}
extern "C" {
    pub static cst_rx_double: *const cst_regex;
}
extern "C" {
    pub static cst_rx_commaint: *const cst_regex;
}
extern "C" {
    pub static cst_rx_digits: *const cst_regex;
}
extern "C" {
    pub static cst_rx_dotted_abbrev: *const cst_regex;
}
extern "C" {
    pub static mut cst_regex_table: [*const cst_regex; 0usize];
}
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
pub type pid_t = __darwin_pid_t;
pub type id_t = __darwin_id_t;
pub type sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state {
    pub __exception: __uint32_t,
    pub __fsr: __uint32_t,
    pub __far: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_exception_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_arm_exception_state>(),
        12usize,
        concat!("Size of: ", stringify!(__darwin_arm_exception_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_arm_exception_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_arm_exception_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_arm_exception_state>())).__exception as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_exception_state),
            "::",
            stringify!(__exception)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_arm_exception_state>())).__fsr as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_exception_state),
            "::",
            stringify!(__fsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_arm_exception_state>())).__far as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_exception_state),
            "::",
            stringify!(__far)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state64 {
    pub __far: __uint64_t,
    pub __esr: __uint32_t,
    pub __exception: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_exception_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_arm_exception_state64>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_arm_exception_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_arm_exception_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_arm_exception_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_arm_exception_state64>())).__far as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_exception_state64),
            "::",
            stringify!(__far)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_arm_exception_state64>())).__esr as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_exception_state64),
            "::",
            stringify!(__esr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_arm_exception_state64>())).__exception as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_exception_state64),
            "::",
            stringify!(__exception)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_thread_state {
    pub __r: [__uint32_t; 13usize],
    pub __sp: __uint32_t,
    pub __lr: __uint32_t,
    pub __pc: __uint32_t,
    pub __cpsr: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_thread_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_arm_thread_state>(),
        68usize,
        concat!("Size of: ", stringify!(__darwin_arm_thread_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_arm_thread_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_arm_thread_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_arm_thread_state>())).__r as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state),
            "::",
            stringify!(__r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_arm_thread_state>())).__sp as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state),
            "::",
            stringify!(__sp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_arm_thread_state>())).__lr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state),
            "::",
            stringify!(__lr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_arm_thread_state>())).__pc as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state),
            "::",
            stringify!(__pc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_arm_thread_state>())).__cpsr as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state),
            "::",
            stringify!(__cpsr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_thread_state64 {
    pub __x: [__uint64_t; 29usize],
    pub __fp: __uint64_t,
    pub __lr: __uint64_t,
    pub __sp: __uint64_t,
    pub __pc: __uint64_t,
    pub __cpsr: __uint32_t,
    pub __pad: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_thread_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_arm_thread_state64>(),
        272usize,
        concat!("Size of: ", stringify!(__darwin_arm_thread_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_arm_thread_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_arm_thread_state64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_arm_thread_state64>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state64),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_arm_thread_state64>())).__fp as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state64),
            "::",
            stringify!(__fp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_arm_thread_state64>())).__lr as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state64),
            "::",
            stringify!(__lr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_arm_thread_state64>())).__sp as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state64),
            "::",
            stringify!(__sp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_arm_thread_state64>())).__pc as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state64),
            "::",
            stringify!(__pc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_arm_thread_state64>())).__cpsr as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state64),
            "::",
            stringify!(__cpsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_arm_thread_state64>())).__pad as *const _ as usize
        },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state64),
            "::",
            stringify!(__pad)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_arm_vfp_state {
    pub __r: [__uint32_t; 64usize],
    pub __fpscr: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_vfp_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_arm_vfp_state>(),
        260usize,
        concat!("Size of: ", stringify!(__darwin_arm_vfp_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_arm_vfp_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_arm_vfp_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_arm_vfp_state>())).__r as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_vfp_state),
            "::",
            stringify!(__r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_arm_vfp_state>())).__fpscr as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_vfp_state),
            "::",
            stringify!(__fpscr)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_neon_state64 {
    pub __v: [__uint128_t; 32usize],
    pub __fpsr: __uint32_t,
    pub __fpcr: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_neon_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_arm_neon_state64>(),
        528usize,
        concat!("Size of: ", stringify!(__darwin_arm_neon_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_arm_neon_state64>(),
        16usize,
        concat!("Alignment of ", stringify!(__darwin_arm_neon_state64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_arm_neon_state64>())).__v as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_neon_state64),
            "::",
            stringify!(__v)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_arm_neon_state64>())).__fpsr as *const _ as usize
        },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_neon_state64),
            "::",
            stringify!(__fpsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_arm_neon_state64>())).__fpcr as *const _ as usize
        },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_neon_state64),
            "::",
            stringify!(__fpcr)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_neon_state {
    pub __v: [__uint128_t; 16usize],
    pub __fpsr: __uint32_t,
    pub __fpcr: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_neon_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_arm_neon_state>(),
        272usize,
        concat!("Size of: ", stringify!(__darwin_arm_neon_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_arm_neon_state>(),
        16usize,
        concat!("Alignment of ", stringify!(__darwin_arm_neon_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_arm_neon_state>())).__v as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_neon_state),
            "::",
            stringify!(__v)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_arm_neon_state>())).__fpsr as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_neon_state),
            "::",
            stringify!(__fpsr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_arm_neon_state>())).__fpcr as *const _ as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_neon_state),
            "::",
            stringify!(__fpcr)
        )
    );
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct __darwin_arm_amx_state_v1 {
    pub __x: [[__uint8_t; 64usize]; 8usize],
    pub __y: [[__uint8_t; 64usize]; 8usize],
    pub __z: [[__uint8_t; 64usize]; 64usize],
    pub __amx_state_t_el1: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_amx_state_v1() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_arm_amx_state_v1>(),
        5184usize,
        concat!("Size of: ", stringify!(__darwin_arm_amx_state_v1))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_arm_amx_state_v1>(),
        64usize,
        concat!("Alignment of ", stringify!(__darwin_arm_amx_state_v1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_arm_amx_state_v1>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_amx_state_v1),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_arm_amx_state_v1>())).__y as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_amx_state_v1),
            "::",
            stringify!(__y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_arm_amx_state_v1>())).__z as *const _ as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_amx_state_v1),
            "::",
            stringify!(__z)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_arm_amx_state_v1>())).__amx_state_t_el1 as *const _
                as usize
        },
        5120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_amx_state_v1),
            "::",
            stringify!(__amx_state_t_el1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __arm_pagein_state {
    pub __pagein_error: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___arm_pagein_state() {
    assert_eq!(
        ::std::mem::size_of::<__arm_pagein_state>(),
        4usize,
        concat!("Size of: ", stringify!(__arm_pagein_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__arm_pagein_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__arm_pagein_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__arm_pagein_state>())).__pagein_error as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__arm_pagein_state),
            "::",
            stringify!(__pagein_error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __arm_legacy_debug_state {
    pub __bvr: [__uint32_t; 16usize],
    pub __bcr: [__uint32_t; 16usize],
    pub __wvr: [__uint32_t; 16usize],
    pub __wcr: [__uint32_t; 16usize],
}
#[test]
fn bindgen_test_layout___arm_legacy_debug_state() {
    assert_eq!(
        ::std::mem::size_of::<__arm_legacy_debug_state>(),
        256usize,
        concat!("Size of: ", stringify!(__arm_legacy_debug_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__arm_legacy_debug_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__arm_legacy_debug_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__arm_legacy_debug_state>())).__bvr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__arm_legacy_debug_state),
            "::",
            stringify!(__bvr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__arm_legacy_debug_state>())).__bcr as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__arm_legacy_debug_state),
            "::",
            stringify!(__bcr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__arm_legacy_debug_state>())).__wvr as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__arm_legacy_debug_state),
            "::",
            stringify!(__wvr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__arm_legacy_debug_state>())).__wcr as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(__arm_legacy_debug_state),
            "::",
            stringify!(__wcr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_debug_state32 {
    pub __bvr: [__uint32_t; 16usize],
    pub __bcr: [__uint32_t; 16usize],
    pub __wvr: [__uint32_t; 16usize],
    pub __wcr: [__uint32_t; 16usize],
    pub __mdscr_el1: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_debug_state32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_arm_debug_state32>(),
        264usize,
        concat!("Size of: ", stringify!(__darwin_arm_debug_state32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_arm_debug_state32>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_arm_debug_state32))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_arm_debug_state32>())).__bvr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state32),
            "::",
            stringify!(__bvr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_arm_debug_state32>())).__bcr as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state32),
            "::",
            stringify!(__bcr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_arm_debug_state32>())).__wvr as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state32),
            "::",
            stringify!(__wvr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_arm_debug_state32>())).__wcr as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state32),
            "::",
            stringify!(__wcr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_arm_debug_state32>())).__mdscr_el1 as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state32),
            "::",
            stringify!(__mdscr_el1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_debug_state64 {
    pub __bvr: [__uint64_t; 16usize],
    pub __bcr: [__uint64_t; 16usize],
    pub __wvr: [__uint64_t; 16usize],
    pub __wcr: [__uint64_t; 16usize],
    pub __mdscr_el1: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_debug_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_arm_debug_state64>(),
        520usize,
        concat!("Size of: ", stringify!(__darwin_arm_debug_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_arm_debug_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_arm_debug_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_arm_debug_state64>())).__bvr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state64),
            "::",
            stringify!(__bvr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_arm_debug_state64>())).__bcr as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state64),
            "::",
            stringify!(__bcr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_arm_debug_state64>())).__wvr as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state64),
            "::",
            stringify!(__wvr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_arm_debug_state64>())).__wcr as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state64),
            "::",
            stringify!(__wcr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_arm_debug_state64>())).__mdscr_el1 as *const _ as usize
        },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state64),
            "::",
            stringify!(__mdscr_el1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_cpmu_state64 {
    pub __ctrs: [__uint64_t; 16usize],
}
#[test]
fn bindgen_test_layout___darwin_arm_cpmu_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_arm_cpmu_state64>(),
        128usize,
        concat!("Size of: ", stringify!(__darwin_arm_cpmu_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_arm_cpmu_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_arm_cpmu_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_arm_cpmu_state64>())).__ctrs as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_cpmu_state64),
            "::",
            stringify!(__ctrs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_mcontext32 {
    pub __es: __darwin_arm_exception_state,
    pub __ss: __darwin_arm_thread_state,
    pub __fs: __darwin_arm_vfp_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext32>(),
        340usize,
        concat!("Size of: ", stringify!(__darwin_mcontext32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext32>())).__es as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext32),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext32>())).__ss as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext32),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext32>())).__fs as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext32),
            "::",
            stringify!(__fs)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64 {
    pub __es: __darwin_arm_exception_state64,
    pub __ss: __darwin_arm_thread_state64,
    pub __ns: __darwin_arm_neon_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext64>(),
        816usize,
        concat!("Size of: ", stringify!(__darwin_mcontext64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext64>(),
        16usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext64>())).__es as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext64>())).__ss as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext64>())).__ns as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64),
            "::",
            stringify!(__ns)
        )
    );
}
pub type mcontext_t = *mut __darwin_mcontext64;
pub type pthread_attr_t = __darwin_pthread_attr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_sigaltstack() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_sigaltstack>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_sigaltstack))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_sigaltstack>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_sigaltstack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_sigaltstack>())).ss_sp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_sigaltstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_sigaltstack>())).ss_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_sigaltstack),
            "::",
            stringify!(ss_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_sigaltstack>())).ss_flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_sigaltstack),
            "::",
            stringify!(ss_flags)
        )
    );
}
pub type stack_t = __darwin_sigaltstack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ucontext {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut __darwin_mcontext64,
}
#[test]
fn bindgen_test_layout___darwin_ucontext() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_ucontext>(),
        56usize,
        concat!("Size of: ", stringify!(__darwin_ucontext))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_ucontext>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_ucontext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_onstack as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_onstack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_sigmask as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_sigmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_stack as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_link as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_mcsize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_mcsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_mcontext as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_mcontext)
        )
    );
}
pub type ucontext_t = __darwin_ucontext;
pub type sigset_t = __darwin_sigset_t;
pub type uid_t = __darwin_uid_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_sigval() {
    assert_eq!(
        ::std::mem::size_of::<sigval>(),
        8usize,
        concat!("Size of: ", stringify!(sigval))
    );
    assert_eq!(
        ::std::mem::align_of::<sigval>(),
        8usize,
        concat!("Alignment of ", stringify!(sigval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigval>())).sival_int as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigval>())).sival_ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_ptr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function: ::std::option::Option<unsafe extern "C" fn(arg1: sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
#[test]
fn bindgen_test_layout_sigevent() {
    assert_eq!(
        ::std::mem::size_of::<sigevent>(),
        32usize,
        concat!("Size of: ", stringify!(sigevent))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_notify as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_signo as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_signo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_notify_function as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify_function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigevent>())).sigev_notify_attributes as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify_attributes)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: sigval,
    pub si_band: ::std::os::raw::c_long,
    pub __pad: [::std::os::raw::c_ulong; 7usize],
}
#[test]
fn bindgen_test_layout___siginfo() {
    assert_eq!(
        ::std::mem::size_of::<__siginfo>(),
        104usize,
        concat!("Size of: ", stringify!(__siginfo))
    );
    assert_eq!(
        ::std::mem::align_of::<__siginfo>(),
        8usize,
        concat!("Alignment of ", stringify!(__siginfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_signo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_signo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_errno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_errno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_code as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_pid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_uid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_status as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_addr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_value as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_band as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_band)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).__pad as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(__pad)
        )
    );
}
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sigaction_u {
    pub __sa_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub __sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut __siginfo,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout___sigaction_u() {
    assert_eq!(
        ::std::mem::size_of::<__sigaction_u>(),
        8usize,
        concat!("Size of: ", stringify!(__sigaction_u))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigaction_u>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigaction_u))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction_u>())).__sa_handler as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction_u),
            "::",
            stringify!(__sa_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction_u>())).__sa_sigaction as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction_u),
            "::",
            stringify!(__sa_sigaction)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_tramp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *mut siginfo_t,
            arg5: *mut ::std::os::raw::c_void,
        ),
    >,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sigaction() {
    assert_eq!(
        ::std::mem::size_of::<__sigaction>(),
        24usize,
        concat!("Size of: ", stringify!(__sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigaction))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction>())).__sigaction_u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(__sigaction_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction>())).sa_tramp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(sa_tramp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction>())).sa_mask as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(sa_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction>())).sa_flags as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(sa_flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigaction() {
    assert_eq!(
        ::std::mem::size_of::<sigaction>(),
        16usize,
        concat!("Size of: ", stringify!(sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).__sigaction_u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(__sigaction_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).sa_mask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).sa_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_flags)
        )
    );
}
pub type sig_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigvec {
    pub sv_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigvec() {
    assert_eq!(
        ::std::mem::size_of::<sigvec>(),
        16usize,
        concat!("Size of: ", stringify!(sigvec))
    );
    assert_eq!(
        ::std::mem::align_of::<sigvec>(),
        8usize,
        concat!("Alignment of ", stringify!(sigvec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigvec>())).sv_handler as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigvec),
            "::",
            stringify!(sv_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigvec>())).sv_mask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigvec),
            "::",
            stringify!(sv_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigvec>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sigvec),
            "::",
            stringify!(sv_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_char,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigstack() {
    assert_eq!(
        ::std::mem::size_of::<sigstack>(),
        16usize,
        concat!("Size of: ", stringify!(sigstack))
    );
    assert_eq!(
        ::std::mem::align_of::<sigstack>(),
        8usize,
        concat!("Alignment of ", stringify!(sigstack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigstack>())).ss_sp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigstack>())).ss_onstack as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_onstack)
        )
    );
}
extern "C" {
    pub fn signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage {
    pub ru_utime: timeval,
    pub ru_stime: timeval,
    pub ru_maxrss: ::std::os::raw::c_long,
    pub ru_ixrss: ::std::os::raw::c_long,
    pub ru_idrss: ::std::os::raw::c_long,
    pub ru_isrss: ::std::os::raw::c_long,
    pub ru_minflt: ::std::os::raw::c_long,
    pub ru_majflt: ::std::os::raw::c_long,
    pub ru_nswap: ::std::os::raw::c_long,
    pub ru_inblock: ::std::os::raw::c_long,
    pub ru_oublock: ::std::os::raw::c_long,
    pub ru_msgsnd: ::std::os::raw::c_long,
    pub ru_msgrcv: ::std::os::raw::c_long,
    pub ru_nsignals: ::std::os::raw::c_long,
    pub ru_nvcsw: ::std::os::raw::c_long,
    pub ru_nivcsw: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_rusage() {
    assert_eq!(
        ::std::mem::size_of::<rusage>(),
        144usize,
        concat!("Size of: ", stringify!(rusage))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_utime as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_utime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_stime as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_stime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_maxrss as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_maxrss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_ixrss as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_ixrss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_idrss as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_idrss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_isrss as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_isrss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_minflt as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_minflt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_majflt as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_majflt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_nswap as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nswap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_inblock as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_inblock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_oublock as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_oublock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_msgsnd as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_msgsnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_msgrcv as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_msgrcv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_nsignals as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nsignals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_nvcsw as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nvcsw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_nivcsw as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nivcsw)
        )
    );
}
pub type rusage_info_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v0 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v0() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v0>(),
        96usize,
        concat!("Size of: ", stringify!(rusage_info_v0))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v0>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v0))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_user_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_system_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v0>())).ri_pkg_idle_wkups as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v0>())).ri_interrupt_wkups as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_pageins as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_wired_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_resident_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v0>())).ri_phys_footprint as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v0>())).ri_proc_start_abstime as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v0>())).ri_proc_exit_abstime as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v1 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v1() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v1>(),
        144usize,
        concat!("Size of: ", stringify!(rusage_info_v1))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v1>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_user_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_system_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_pkg_idle_wkups as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_interrupt_wkups as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_pageins as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_wired_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_resident_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_phys_footprint as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_proc_start_abstime as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_proc_exit_abstime as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_user_time as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_system_time as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_pkg_idle_wkups as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_interrupt_wkups as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_pageins as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_elapsed_abstime as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v2 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v2() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v2>(),
        160usize,
        concat!("Size of: ", stringify!(rusage_info_v2))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v2>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_user_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_system_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_pkg_idle_wkups as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_interrupt_wkups as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_pageins as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_wired_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_resident_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_phys_footprint as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_proc_start_abstime as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_proc_exit_abstime as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_user_time as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_system_time as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_pkg_idle_wkups as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_interrupt_wkups as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_pageins as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_elapsed_abstime as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_diskio_bytesread as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_diskio_byteswritten as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v3 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v3() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v3>(),
        232usize,
        concat!("Size of: ", stringify!(rusage_info_v3))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v3>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_user_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_system_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_pkg_idle_wkups as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_interrupt_wkups as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_pageins as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_wired_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_resident_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_phys_footprint as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_proc_start_abstime as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_proc_exit_abstime as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_user_time as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_system_time as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_pkg_idle_wkups as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_interrupt_wkups as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_pageins as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_elapsed_abstime as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_diskio_bytesread as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_diskio_byteswritten as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_default as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_maintenance as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_background as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_utility as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_legacy as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_user_initiated as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_user_interactive as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_billed_system_time as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_serviced_system_time as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v4 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v4() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v4>(),
        296usize,
        concat!("Size of: ", stringify!(rusage_info_v4))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v4>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_user_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_system_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_pkg_idle_wkups as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_interrupt_wkups as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_pageins as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_wired_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_resident_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_phys_footprint as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_proc_start_abstime as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_proc_exit_abstime as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_user_time as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_system_time as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_pkg_idle_wkups as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_interrupt_wkups as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_pageins as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_elapsed_abstime as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_diskio_bytesread as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_diskio_byteswritten as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_default as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_maintenance as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_background as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_utility as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_legacy as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_user_initiated as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_user_interactive as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_billed_system_time as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_serviced_system_time as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_logical_writes as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_logical_writes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_lifetime_max_phys_footprint as *const _
                as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_lifetime_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_instructions as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_instructions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_cycles as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cycles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_billed_energy as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_billed_energy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_serviced_energy as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_serviced_energy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_interval_max_phys_footprint as *const _
                as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_interval_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_runnable_time as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_runnable_time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v5 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v5() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v5>(),
        304usize,
        concat!("Size of: ", stringify!(rusage_info_v5))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v5>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v5))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v5>())).ri_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v5>())).ri_user_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v5>())).ri_system_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_pkg_idle_wkups as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_interrupt_wkups as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v5>())).ri_pageins as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v5>())).ri_wired_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v5>())).ri_resident_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_phys_footprint as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_proc_start_abstime as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_proc_exit_abstime as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_child_user_time as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_child_system_time as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_child_pkg_idle_wkups as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_child_interrupt_wkups as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v5>())).ri_child_pageins as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_child_elapsed_abstime as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_diskio_bytesread as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_diskio_byteswritten as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_cpu_time_qos_default as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_cpu_time_qos_maintenance as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_cpu_time_qos_background as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_cpu_time_qos_utility as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_cpu_time_qos_legacy as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_cpu_time_qos_user_initiated as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_cpu_time_qos_user_interactive as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_billed_system_time as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_serviced_system_time as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_logical_writes as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_logical_writes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_lifetime_max_phys_footprint as *const _
                as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_lifetime_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v5>())).ri_instructions as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_instructions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v5>())).ri_cycles as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cycles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v5>())).ri_billed_energy as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_billed_energy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_serviced_energy as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_serviced_energy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_interval_max_phys_footprint as *const _
                as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_interval_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v5>())).ri_runnable_time as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_runnable_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v5>())).ri_flags as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_flags)
        )
    );
}
pub type rusage_info_current = rusage_info_v5;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
#[test]
fn bindgen_test_layout_rlimit() {
    assert_eq!(
        ::std::mem::size_of::<rlimit>(),
        16usize,
        concat!("Size of: ", stringify!(rlimit))
    );
    assert_eq!(
        ::std::mem::align_of::<rlimit>(),
        8usize,
        concat!("Alignment of ", stringify!(rlimit))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rlimit>())).rlim_cur as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rlimit),
            "::",
            stringify!(rlim_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rlimit>())).rlim_max as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rlimit),
            "::",
            stringify!(rlim_max)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_rlimit_control_wakeupmon {
    pub wm_flags: u32,
    pub wm_rate: i32,
}
#[test]
fn bindgen_test_layout_proc_rlimit_control_wakeupmon() {
    assert_eq!(
        ::std::mem::size_of::<proc_rlimit_control_wakeupmon>(),
        8usize,
        concat!("Size of: ", stringify!(proc_rlimit_control_wakeupmon))
    );
    assert_eq!(
        ::std::mem::align_of::<proc_rlimit_control_wakeupmon>(),
        4usize,
        concat!("Alignment of ", stringify!(proc_rlimit_control_wakeupmon))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<proc_rlimit_control_wakeupmon>())).wm_flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(proc_rlimit_control_wakeupmon),
            "::",
            stringify!(wm_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<proc_rlimit_control_wakeupmon>())).wm_rate as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(proc_rlimit_control_wakeupmon),
            "::",
            stringify!(wm_rate)
        )
    );
}
extern "C" {
    pub fn getpriority(arg1: ::std::os::raw::c_int, arg2: id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrlimit(arg1: ::std::os::raw::c_int, arg2: *mut rlimit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrusage(arg1: ::std::os::raw::c_int, arg2: *mut rusage) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpriority(
        arg1: ::std::os::raw::c_int,
        arg2: id_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setrlimit(arg1: ::std::os::raw::c_int, arg2: *const rlimit) -> ::std::os::raw::c_int;
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU16 {
    pub __val: u16,
}
#[test]
fn bindgen_test_layout__OSUnalignedU16() {
    assert_eq!(
        ::std::mem::size_of::<_OSUnalignedU16>(),
        2usize,
        concat!("Size of: ", stringify!(_OSUnalignedU16))
    );
    assert_eq!(
        ::std::mem::align_of::<_OSUnalignedU16>(),
        1usize,
        concat!("Alignment of ", stringify!(_OSUnalignedU16))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_OSUnalignedU16>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OSUnalignedU16),
            "::",
            stringify!(__val)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU32 {
    pub __val: u32,
}
#[test]
fn bindgen_test_layout__OSUnalignedU32() {
    assert_eq!(
        ::std::mem::size_of::<_OSUnalignedU32>(),
        4usize,
        concat!("Size of: ", stringify!(_OSUnalignedU32))
    );
    assert_eq!(
        ::std::mem::align_of::<_OSUnalignedU32>(),
        1usize,
        concat!("Alignment of ", stringify!(_OSUnalignedU32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_OSUnalignedU32>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OSUnalignedU32),
            "::",
            stringify!(__val)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU64 {
    pub __val: u64,
}
#[test]
fn bindgen_test_layout__OSUnalignedU64() {
    assert_eq!(
        ::std::mem::size_of::<_OSUnalignedU64>(),
        8usize,
        concat!("Size of: ", stringify!(_OSUnalignedU64))
    );
    assert_eq!(
        ::std::mem::align_of::<_OSUnalignedU64>(),
        1usize,
        concat!("Alignment of ", stringify!(_OSUnalignedU64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_OSUnalignedU64>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OSUnalignedU64),
            "::",
            stringify!(__val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub w_status: ::std::os::raw::c_int,
    pub w_T: wait__bindgen_ty_1,
    pub w_S: wait__bindgen_ty_2,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_1))
    );
}
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn w_Termsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_w_Termsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Coredump(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_w_Coredump(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Retcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Retcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Termsig: ::std::os::raw::c_uint,
        w_Coredump: ::std::os::raw::c_uint,
        w_Retcode: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let w_Termsig: u32 = unsafe { ::std::mem::transmute(w_Termsig) };
            w_Termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let w_Coredump: u32 = unsafe { ::std::mem::transmute(w_Coredump) };
            w_Coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Retcode: u32 = unsafe { ::std::mem::transmute(w_Retcode) };
            w_Retcode as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_2))
    );
}
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn w_Stopval(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopval(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Stopval: ::std::os::raw::c_uint,
        w_Stopsig: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let w_Stopval: u32 = unsafe { ::std::mem::transmute(w_Stopval) };
            w_Stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Stopsig: u32 = unsafe { ::std::mem::transmute(w_Stopsig) };
            w_Stopsig as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_wait() {
    assert_eq!(
        ::std::mem::size_of::<wait>(),
        4usize,
        concat!("Size of: ", stringify!(wait))
    );
    assert_eq!(
        ::std::mem::align_of::<wait>(),
        4usize,
        concat!("Alignment of ", stringify!(wait))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).w_status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wait),
            "::",
            stringify!(w_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).w_T as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(wait), "::", stringify!(w_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).w_S as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(wait), "::", stringify!(w_S))
    );
}
extern "C" {
    pub fn wait(arg1: *mut ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn waitpid(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> pid_t;
}
extern "C" {
    pub fn waitid(
        arg1: idtype_t,
        arg2: id_t,
        arg3: *mut siginfo_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wait3(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn wait4(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn alloca(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
pub type wchar_t = __darwin_wchar_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub static mut __mb_cur_max: ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __count: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(arg1: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn aligned_alloc(__alignment: size_t, __size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atof(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn div(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn exit(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ldiv(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn llabs(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lldiv(arg1: ::std::os::raw::c_longlong, arg2: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn mbtowc(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn strtod(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtol(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtold(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtoll(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn system(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstombs(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const wchar_t,
        arg3: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn wctomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _Exit(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn a64l(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn ecvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn erand48(arg1: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn fcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getsubopt(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grantpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_char,
        arg3: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn jrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn l64a(arg1: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lcong48(arg1: *mut ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mktemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn posix_openpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ptsname_r(
        fildes: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
        buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rand_r(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_realpath$DARWIN_EXTSN"]
    pub fn realpath(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn seed48(arg1: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __overwrite: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setkey(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn setstate(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn srand48(arg1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn srandom(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
pub type dev_t = __darwin_dev_t;
pub type mode_t = __darwin_mode_t;
extern "C" {
    pub fn arc4random() -> u32;
}
extern "C" {
    pub fn arc4random_addrandom(arg1: *mut ::std::os::raw::c_uchar, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __nbytes: size_t);
}
extern "C" {
    pub fn arc4random_stir();
}
extern "C" {
    pub fn arc4random_uniform(__upper_bound: u32) -> u32;
}
extern "C" {
    pub fn atexit_b(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsearch_b(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        __compar: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cgetcap(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cgetclose() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetent(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetfirst(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetmatch(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnext(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnum(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetset(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetustr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daemon(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn devname_r(
        arg1: dev_t,
        arg2: mode_t,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getbsize(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getloadavg(arg1: *mut f64, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprogname() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn setprogname(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn heapsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn heapsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort(
        __base: *mut ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psort(
        __base: *mut ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn psort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn psort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn qsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: size_t,
        __width: size_t,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn radixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rpmatch(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sradixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sranddev();
}
extern "C" {
    pub fn srandomdev();
}
extern "C" {
    pub fn reallocf(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strtonum(
        __numstr: *const ::std::os::raw::c_char,
        __minval: ::std::os::raw::c_longlong,
        __maxval: ::std::os::raw::c_longlong,
        __errstrp: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub static mut suboptarg: *mut ::std::os::raw::c_char;
}
pub type jmp_buf = [::std::os::raw::c_int; 48usize];
pub type sigjmp_buf = [::std::os::raw::c_int; 49usize];
extern "C" {
    pub fn setjmp(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _setjmp(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _longjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn sigsetjmp(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siglongjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn longjmperror();
}
extern "C" {
    pub static mut cst_errjmp: *mut jmp_buf;
}
extern "C" {
    pub fn cst_errmsg(fmt: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cst_safe_alloc(size: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cst_safe_calloc(size: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cst_safe_realloc(
        p: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
pub type cst_alloc_context = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn cst_free(p: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cst_val_cons_struct {
    pub car: *mut cst_val_struct,
    pub cdr: *mut cst_val_struct,
}
#[test]
fn bindgen_test_layout_cst_val_cons_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_val_cons_struct>(),
        16usize,
        concat!("Size of: ", stringify!(cst_val_cons_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_val_cons_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_val_cons_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_val_cons_struct>())).car as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_val_cons_struct),
            "::",
            stringify!(car)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_val_cons_struct>())).cdr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_val_cons_struct),
            "::",
            stringify!(cdr)
        )
    );
}
pub type cst_val_cons = cst_val_cons_struct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cst_val_atom_struct {
    pub type_: ::std::os::raw::c_int,
    pub ref_count: ::std::os::raw::c_int,
    pub v: cst_val_atom_struct__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cst_val_atom_struct__bindgen_ty_1 {
    pub fval: f64,
    pub ival: ::std::os::raw::c_longlong,
    pub vval: *mut ::std::os::raw::c_void,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_cst_val_atom_struct__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cst_val_atom_struct__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cst_val_atom_struct__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_val_atom_struct__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cst_val_atom_struct__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_val_atom_struct__bindgen_ty_1>())).fval as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_val_atom_struct__bindgen_ty_1),
            "::",
            stringify!(fval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_val_atom_struct__bindgen_ty_1>())).ival as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_val_atom_struct__bindgen_ty_1),
            "::",
            stringify!(ival)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_val_atom_struct__bindgen_ty_1>())).vval as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_val_atom_struct__bindgen_ty_1),
            "::",
            stringify!(vval)
        )
    );
}
#[test]
fn bindgen_test_layout_cst_val_atom_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_val_atom_struct>(),
        16usize,
        concat!("Size of: ", stringify!(cst_val_atom_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_val_atom_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_val_atom_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_val_atom_struct>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_val_atom_struct),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_val_atom_struct>())).ref_count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_val_atom_struct),
            "::",
            stringify!(ref_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_val_atom_struct>())).v as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_val_atom_struct),
            "::",
            stringify!(v)
        )
    );
}
pub type cst_val_atom = cst_val_atom_struct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cst_val_struct {
    pub c: cst_val_struct__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cst_val_struct__bindgen_ty_1 {
    pub cc: cst_val_cons,
    pub a: cst_val_atom,
    _bindgen_union_align: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_cst_val_struct__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cst_val_struct__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(cst_val_struct__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_val_struct__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_val_struct__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_val_struct__bindgen_ty_1>())).cc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_val_struct__bindgen_ty_1),
            "::",
            stringify!(cc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_val_struct__bindgen_ty_1>())).a as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_val_struct__bindgen_ty_1),
            "::",
            stringify!(a)
        )
    );
}
#[test]
fn bindgen_test_layout_cst_val_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_val_struct>(),
        16usize,
        concat!("Size of: ", stringify!(cst_val_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_val_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_val_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_val_struct>())).c as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_val_struct),
            "::",
            stringify!(c)
        )
    );
}
pub type cst_val = cst_val_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cst_val_def_struct {
    pub name: *const ::std::os::raw::c_char,
    pub delete_function:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout_cst_val_def_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_val_def_struct>(),
        16usize,
        concat!("Size of: ", stringify!(cst_val_def_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_val_def_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_val_def_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_val_def_struct>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_val_def_struct),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_val_def_struct>())).delete_function as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_val_def_struct),
            "::",
            stringify!(delete_function)
        )
    );
}
pub type cst_val_def = cst_val_def_struct;
extern "C" {
    pub fn int_val(i: ::std::os::raw::c_int) -> *mut cst_val;
}
extern "C" {
    pub fn float_val(f: f32) -> *mut cst_val;
}
extern "C" {
    pub fn string_val(s: *const ::std::os::raw::c_char) -> *mut cst_val;
}
extern "C" {
    pub fn val_new_typed(
        type_: ::std::os::raw::c_int,
        vv: *mut ::std::os::raw::c_void,
    ) -> *mut cst_val;
}
extern "C" {
    pub fn cons_val(a: *const cst_val, b: *const cst_val) -> *mut cst_val;
}
extern "C" {
    pub fn delete_val(val: *mut cst_val);
}
extern "C" {
    pub fn delete_val_list(val: *mut cst_val);
}
extern "C" {
    pub fn val_int(v: *const cst_val) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn val_float(v: *const cst_val) -> f32;
}
extern "C" {
    pub fn val_string(v: *const cst_val) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn val_void(v: *const cst_val) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn val_generic(
        v: *const cst_val,
        type_: ::std::os::raw::c_int,
        stype: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn val_car(v: *const cst_val) -> *const cst_val;
}
extern "C" {
    pub fn val_cdr(v: *const cst_val) -> *const cst_val;
}
extern "C" {
    pub fn set_cdr(v1: *mut cst_val, v2: *const cst_val) -> *const cst_val;
}
extern "C" {
    pub fn set_car(v1: *mut cst_val, v2: *const cst_val) -> *const cst_val;
}
extern "C" {
    pub fn cst_val_consp(v: *const cst_val) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn val_equal(a: *const cst_val, b: *const cst_val) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn val_less(a: *const cst_val, b: *const cst_val) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn val_greater(a: *const cst_val, b: *const cst_val) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn val_member(a: *const cst_val, b: *const cst_val) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn val_member_string(
        a: *const ::std::os::raw::c_char,
        b: *const cst_val,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn val_stringp(a: *const cst_val) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn val_assoc_string(
        v1: *const ::std::os::raw::c_char,
        al: *const cst_val,
    ) -> *const cst_val;
}
extern "C" {
    pub fn val_print(fd: cst_file, v: *const cst_val);
}
extern "C" {
    pub fn val_readlist_string(str_: *const ::std::os::raw::c_char) -> *mut cst_val;
}
extern "C" {
    pub fn val_reverse(v: *mut cst_val) -> *mut cst_val;
}
extern "C" {
    pub fn val_append(a: *mut cst_val, b: *mut cst_val) -> *mut cst_val;
}
extern "C" {
    pub fn val_length(l: *const cst_val) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cst_utf8_explode(utf8string: *const cst_string) -> *mut cst_val;
}
extern "C" {
    pub fn cst_implode(string_list: *const cst_val) -> *mut cst_string;
}
extern "C" {
    pub fn cst_utf8_ord(utf8_char: *const cst_val) -> *mut cst_val;
}
extern "C" {
    pub fn cst_utf8_chr(ord: *const cst_val) -> *mut cst_val;
}
extern "C" {
    pub fn cst_utf8_ord_string(utf8_char: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn val_dec_refcount(b: *const cst_val) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn val_inc_refcount(b: *const cst_val) -> *mut cst_val;
}
extern "C" {
    pub static val_int_0: cst_val;
}
extern "C" {
    pub static val_int_1: cst_val;
}
extern "C" {
    pub static val_int_2: cst_val;
}
extern "C" {
    pub static val_int_3: cst_val;
}
extern "C" {
    pub static val_int_4: cst_val;
}
extern "C" {
    pub static val_int_5: cst_val;
}
extern "C" {
    pub static val_int_6: cst_val;
}
extern "C" {
    pub static val_int_7: cst_val;
}
extern "C" {
    pub static val_int_8: cst_val;
}
extern "C" {
    pub static val_int_9: cst_val;
}
extern "C" {
    pub static val_int_10: cst_val;
}
extern "C" {
    pub static val_int_11: cst_val;
}
extern "C" {
    pub static val_int_12: cst_val;
}
extern "C" {
    pub static val_int_13: cst_val;
}
extern "C" {
    pub static val_int_14: cst_val;
}
extern "C" {
    pub static val_int_15: cst_val;
}
extern "C" {
    pub static val_int_16: cst_val;
}
extern "C" {
    pub static val_int_17: cst_val;
}
extern "C" {
    pub static val_int_18: cst_val;
}
extern "C" {
    pub static val_int_19: cst_val;
}
extern "C" {
    pub static val_int_20: cst_val;
}
extern "C" {
    pub static val_int_21: cst_val;
}
extern "C" {
    pub static val_int_22: cst_val;
}
extern "C" {
    pub static val_int_23: cst_val;
}
extern "C" {
    pub static val_int_24: cst_val;
}
extern "C" {
    pub static val_string_0: cst_val;
}
extern "C" {
    pub static val_string_1: cst_val;
}
extern "C" {
    pub static val_string_2: cst_val;
}
extern "C" {
    pub static val_string_3: cst_val;
}
extern "C" {
    pub static val_string_4: cst_val;
}
extern "C" {
    pub static val_string_5: cst_val;
}
extern "C" {
    pub static val_string_6: cst_val;
}
extern "C" {
    pub static val_string_7: cst_val;
}
extern "C" {
    pub static val_string_8: cst_val;
}
extern "C" {
    pub static val_string_9: cst_val;
}
extern "C" {
    pub static val_string_10: cst_val;
}
extern "C" {
    pub static val_string_11: cst_val;
}
extern "C" {
    pub static val_string_12: cst_val;
}
extern "C" {
    pub static val_string_13: cst_val;
}
extern "C" {
    pub static val_string_14: cst_val;
}
extern "C" {
    pub static val_string_15: cst_val;
}
extern "C" {
    pub static val_string_16: cst_val;
}
extern "C" {
    pub static val_string_17: cst_val;
}
extern "C" {
    pub static val_string_18: cst_val;
}
extern "C" {
    pub static val_string_19: cst_val;
}
extern "C" {
    pub static val_string_20: cst_val;
}
extern "C" {
    pub static val_string_21: cst_val;
}
extern "C" {
    pub static val_string_22: cst_val;
}
extern "C" {
    pub static val_string_23: cst_val;
}
extern "C" {
    pub static val_string_24: cst_val;
}
extern "C" {
    pub fn val_int_n(n: ::std::os::raw::c_int) -> *const cst_val;
}
extern "C" {
    pub fn val_string_n(n: ::std::os::raw::c_int) -> *const cst_val;
}
extern "C" {
    pub static mut cst_val_defs: [cst_val_def; 0usize];
}
pub type cst_userdata = ::std::os::raw::c_void;
extern "C" {
    pub static cst_val_type_userdata: ::std::os::raw::c_int;
}
extern "C" {
    pub fn val_userdata(v: *const cst_val) -> *mut cst_userdata;
}
extern "C" {
    pub fn userdata_val(v: *const cst_userdata) -> *mut cst_val;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cst_featvalpair_struct {
    pub name: *const ::std::os::raw::c_char,
    pub val: *mut cst_val,
    pub next: *mut cst_featvalpair_struct,
}
#[test]
fn bindgen_test_layout_cst_featvalpair_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_featvalpair_struct>(),
        24usize,
        concat!("Size of: ", stringify!(cst_featvalpair_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_featvalpair_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_featvalpair_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_featvalpair_struct>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_featvalpair_struct),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_featvalpair_struct>())).val as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_featvalpair_struct),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_featvalpair_struct>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_featvalpair_struct),
            "::",
            stringify!(next)
        )
    );
}
pub type cst_featvalpair = cst_featvalpair_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cst_features_struct {
    pub head: *mut cst_featvalpair_struct,
    pub ctx: cst_alloc_context,
    pub owned_strings: *mut cst_val,
    pub linked: *const cst_features_struct,
}
#[test]
fn bindgen_test_layout_cst_features_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_features_struct>(),
        32usize,
        concat!("Size of: ", stringify!(cst_features_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_features_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_features_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_features_struct>())).head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_features_struct),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_features_struct>())).ctx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_features_struct),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_features_struct>())).owned_strings as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_features_struct),
            "::",
            stringify!(owned_strings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_features_struct>())).linked as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_features_struct),
            "::",
            stringify!(linked)
        )
    );
}
pub type cst_features = cst_features_struct;
extern "C" {
    pub fn new_features() -> *mut cst_features;
}
extern "C" {
    pub fn new_features_local(ctx: cst_alloc_context) -> *mut cst_features;
}
extern "C" {
    pub fn delete_features(f: *mut cst_features);
}
extern "C" {
    pub fn feat_int(
        f: *const cst_features,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feat_float(f: *const cst_features, name: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn feat_string(
        f: *const cst_features,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn feat_val(f: *const cst_features, name: *const ::std::os::raw::c_char) -> *const cst_val;
}
extern "C" {
    pub fn get_param_int(
        f: *const cst_features,
        name: *const ::std::os::raw::c_char,
        def: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_param_float(
        f: *const cst_features,
        name: *const ::std::os::raw::c_char,
        def: f32,
    ) -> f32;
}
extern "C" {
    pub fn get_param_string(
        f: *const cst_features,
        name: *const ::std::os::raw::c_char,
        def: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_param_val(
        f: *const cst_features,
        name: *const ::std::os::raw::c_char,
        def: *mut cst_val,
    ) -> *const cst_val;
}
extern "C" {
    pub fn feat_set_int(
        f: *mut cst_features,
        name: *const ::std::os::raw::c_char,
        v: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn feat_set_float(f: *mut cst_features, name: *const ::std::os::raw::c_char, v: f32);
}
extern "C" {
    pub fn feat_set_string(
        f: *mut cst_features,
        name: *const ::std::os::raw::c_char,
        v: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn feat_set(f: *mut cst_features, name: *const ::std::os::raw::c_char, v: *const cst_val);
}
extern "C" {
    pub fn feat_remove(
        f: *mut cst_features,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feat_present(
        f: *const cst_features,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feat_length(f: *const cst_features) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feat_own_string(
        f: *mut cst_features,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub static cst_val_type_features: ::std::os::raw::c_int;
}
extern "C" {
    pub fn val_features(v: *const cst_val) -> *mut cst_features;
}
extern "C" {
    pub fn features_val(v: *const cst_features) -> *mut cst_val;
}
extern "C" {
    pub fn feat_copy_into(
        from: *const cst_features,
        to: *mut cst_features,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feat_link_into(
        from: *const cst_features,
        to: *mut cst_features,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cst_feat_print(fd: cst_file, f: *const cst_features) -> ::std::os::raw::c_int;
}
pub type cst_relation = cst_relation_struct;
pub type cst_utterance = cst_utterance_struct;
pub type cst_item = cst_item_struct;
extern "C" {
    pub static cst_val_type_relation: ::std::os::raw::c_int;
}
extern "C" {
    pub fn val_relation(v: *const cst_val) -> *mut cst_relation;
}
extern "C" {
    pub fn relation_val(v: *const cst_relation) -> *mut cst_val;
}
extern "C" {
    pub static cst_val_type_item: ::std::os::raw::c_int;
}
extern "C" {
    pub fn val_item(v: *const cst_val) -> *mut cst_item;
}
extern "C" {
    pub fn item_val(v: *const cst_item) -> *mut cst_val;
}
extern "C" {
    pub static cst_val_type_utterance: ::std::os::raw::c_int;
}
extern "C" {
    pub fn val_utterance(v: *const cst_val) -> *mut cst_utterance;
}
extern "C" {
    pub fn utterance_val(v: *const cst_utterance) -> *mut cst_val;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cst_item_contents_struct {
    pub features: *mut cst_features,
    pub relations: *mut cst_features,
}
#[test]
fn bindgen_test_layout_cst_item_contents_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_item_contents_struct>(),
        16usize,
        concat!("Size of: ", stringify!(cst_item_contents_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_item_contents_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_item_contents_struct))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_item_contents_struct>())).features as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_item_contents_struct),
            "::",
            stringify!(features)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_item_contents_struct>())).relations as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_item_contents_struct),
            "::",
            stringify!(relations)
        )
    );
}
pub type cst_item_contents = cst_item_contents_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cst_item_struct {
    pub contents: *mut cst_item_contents,
    pub relation: *mut cst_relation,
    pub n: *mut cst_item,
    pub p: *mut cst_item,
    pub u: *mut cst_item,
    pub d: *mut cst_item,
}
#[test]
fn bindgen_test_layout_cst_item_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_item_struct>(),
        48usize,
        concat!("Size of: ", stringify!(cst_item_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_item_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_item_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_item_struct>())).contents as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_item_struct),
            "::",
            stringify!(contents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_item_struct>())).relation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_item_struct),
            "::",
            stringify!(relation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_item_struct>())).n as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_item_struct),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_item_struct>())).p as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_item_struct),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_item_struct>())).u as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_item_struct),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_item_struct>())).d as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_item_struct),
            "::",
            stringify!(d)
        )
    );
}
extern "C" {
    pub fn new_item_relation(r: *mut cst_relation, i: *mut cst_item) -> *mut cst_item;
}
extern "C" {
    pub fn new_item_contents(i: *mut cst_item) -> *mut cst_item_contents;
}
extern "C" {
    pub fn delete_item(item: *mut cst_item);
}
extern "C" {
    pub fn item_contents_set(current: *mut cst_item, i: *mut cst_item);
}
extern "C" {
    pub fn item_unref_contents(i: *mut cst_item);
}
extern "C" {
    pub fn item_as(i: *const cst_item, rname: *const ::std::os::raw::c_char) -> *mut cst_item;
}
extern "C" {
    pub fn item_utt(i: *const cst_item) -> *mut cst_utterance;
}
extern "C" {
    pub fn item_next(i: *const cst_item) -> *mut cst_item;
}
extern "C" {
    pub fn item_prev(i: *const cst_item) -> *mut cst_item;
}
extern "C" {
    pub fn item_append(i: *mut cst_item, new_item: *mut cst_item) -> *mut cst_item;
}
extern "C" {
    pub fn item_prepend(i: *mut cst_item, new_item: *mut cst_item) -> *mut cst_item;
}
extern "C" {
    pub fn item_parent(i: *const cst_item) -> *mut cst_item;
}
extern "C" {
    pub fn item_nth_daughter(i: *const cst_item, n: ::std::os::raw::c_int) -> *mut cst_item;
}
extern "C" {
    pub fn item_daughter(i: *const cst_item) -> *mut cst_item;
}
extern "C" {
    pub fn item_last_daughter(i: *const cst_item) -> *mut cst_item;
}
extern "C" {
    pub fn item_first(i: *const cst_item) -> *mut cst_item;
}
extern "C" {
    pub fn item_last(i: *const cst_item) -> *mut cst_item;
}
extern "C" {
    pub fn item_add_daughter(i: *mut cst_item, new_item: *mut cst_item) -> *mut cst_item;
}
extern "C" {
    pub fn item_append_sibling(i: *mut cst_item, new_item: *mut cst_item) -> *mut cst_item;
}
extern "C" {
    pub fn item_prepend_sibling(i: *mut cst_item, new_item: *mut cst_item) -> *mut cst_item;
}
extern "C" {
    pub fn item_feat_present(
        i: *const cst_item,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn item_feat_remove(
        i: *const cst_item,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn item_feats(i: *const cst_item) -> *mut cst_features;
}
extern "C" {
    pub fn item_feat(i: *const cst_item, name: *const ::std::os::raw::c_char) -> *const cst_val;
}
extern "C" {
    pub fn item_feat_int(
        i: *const cst_item,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn item_feat_float(i: *const cst_item, name: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn item_feat_string(
        i: *const cst_item,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn item_set(i: *const cst_item, name: *const ::std::os::raw::c_char, val: *const cst_val);
}
extern "C" {
    pub fn item_set_int(
        i: *const cst_item,
        name: *const ::std::os::raw::c_char,
        val: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn item_set_float(i: *const cst_item, name: *const ::std::os::raw::c_char, val: f32);
}
extern "C" {
    pub fn item_set_string(
        i: *const cst_item,
        name: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn item_equal(a: *const cst_item, b: *const cst_item) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffeature_string(
        item: *const cst_item,
        featpath: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffeature_int(
        item: *const cst_item,
        featpath: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffeature_float(item: *const cst_item, featpath: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn ffeature(
        item: *const cst_item,
        featpath: *const ::std::os::raw::c_char,
    ) -> *const cst_val;
}
extern "C" {
    pub fn path_to_item(
        item: *const cst_item,
        featpath: *const ::std::os::raw::c_char,
    ) -> *mut cst_item;
}
pub type cst_ffunction =
    ::std::option::Option<unsafe extern "C" fn(i: *const cst_item) -> *const cst_val>;
extern "C" {
    pub static cst_val_type_ffunc: ::std::os::raw::c_int;
}
extern "C" {
    pub fn val_ffunc(v: *const cst_val) -> cst_ffunction;
}
extern "C" {
    pub fn ffunc_val(v: cst_ffunction) -> *mut cst_val;
}
extern "C" {
    pub fn ff_register(
        ffeatures: *mut cst_features,
        name: *const ::std::os::raw::c_char,
        f: cst_ffunction,
    );
}
extern "C" {
    pub fn ff_unregister(ffeatures: *mut cst_features, name: *const ::std::os::raw::c_char);
}
pub type cst_itemfunc =
    ::std::option::Option<unsafe extern "C" fn(i: *mut cst_item) -> *mut cst_val>;
extern "C" {
    pub static cst_val_type_itemfunc: ::std::os::raw::c_int;
}
extern "C" {
    pub fn val_itemfunc(v: *const cst_val) -> cst_itemfunc;
}
extern "C" {
    pub fn itemfunc_val(v: cst_itemfunc) -> *mut cst_val;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cst_utterance_struct {
    pub features: *mut cst_features,
    pub ffunctions: *mut cst_features,
    pub relations: *mut cst_features,
    pub ctx: cst_alloc_context,
}
#[test]
fn bindgen_test_layout_cst_utterance_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_utterance_struct>(),
        32usize,
        concat!("Size of: ", stringify!(cst_utterance_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_utterance_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_utterance_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_utterance_struct>())).features as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_utterance_struct),
            "::",
            stringify!(features)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_utterance_struct>())).ffunctions as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_utterance_struct),
            "::",
            stringify!(ffunctions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_utterance_struct>())).relations as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_utterance_struct),
            "::",
            stringify!(relations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_utterance_struct>())).ctx as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_utterance_struct),
            "::",
            stringify!(ctx)
        )
    );
}
extern "C" {
    pub fn new_utterance() -> *mut cst_utterance;
}
extern "C" {
    pub fn delete_utterance(u: *mut cst_utterance);
}
extern "C" {
    pub fn utt_relation(
        u: *const cst_utterance,
        name: *const ::std::os::raw::c_char,
    ) -> *mut cst_relation;
}
extern "C" {
    pub fn utt_relation_create(
        u: *mut cst_utterance,
        name: *const ::std::os::raw::c_char,
    ) -> *mut cst_relation;
}
extern "C" {
    pub fn utt_relation_delete(
        u: *mut cst_utterance,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utt_relation_present(
        u: *mut cst_utterance,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type cst_uttfunc =
    ::std::option::Option<unsafe extern "C" fn(i: *mut cst_utterance) -> *mut cst_utterance>;
extern "C" {
    pub static cst_val_type_uttfunc: ::std::os::raw::c_int;
}
extern "C" {
    pub fn val_uttfunc(v: *const cst_val) -> cst_uttfunc;
}
extern "C" {
    pub fn uttfunc_val(v: cst_uttfunc) -> *mut cst_val;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cst_relation_struct {
    pub name: *mut ::std::os::raw::c_char,
    pub features: *mut cst_features,
    pub utterance: *mut cst_utterance,
    pub head: *mut cst_item,
    pub tail: *mut cst_item,
}
#[test]
fn bindgen_test_layout_cst_relation_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_relation_struct>(),
        40usize,
        concat!("Size of: ", stringify!(cst_relation_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_relation_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_relation_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_relation_struct>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_relation_struct),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_relation_struct>())).features as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_relation_struct),
            "::",
            stringify!(features)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_relation_struct>())).utterance as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_relation_struct),
            "::",
            stringify!(utterance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_relation_struct>())).head as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_relation_struct),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_relation_struct>())).tail as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_relation_struct),
            "::",
            stringify!(tail)
        )
    );
}
extern "C" {
    pub fn new_relation(
        name: *const ::std::os::raw::c_char,
        u: *mut cst_utterance,
    ) -> *mut cst_relation;
}
extern "C" {
    pub fn delete_relation(r: *mut cst_relation);
}
extern "C" {
    pub fn relation_head(r: *mut cst_relation) -> *mut cst_item;
}
extern "C" {
    pub fn relation_tail(r: *mut cst_relation) -> *mut cst_item;
}
extern "C" {
    pub fn relation_name(r: *mut cst_relation) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn relation_append(r: *mut cst_relation, i: *mut cst_item) -> *mut cst_item;
}
extern "C" {
    pub fn relation_prepend(r: *mut cst_relation, i: *mut cst_item) -> *mut cst_item;
}
extern "C" {
    pub fn relation_load(
        r: *mut cst_relation,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn relation_save(
        r: *mut cst_relation,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static cst_endian_loc: ::std::os::raw::c_int;
}
extern "C" {
    pub fn swap_bytes_short(b: *mut ::std::os::raw::c_short, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn swapdouble(d: *mut f64);
}
extern "C" {
    pub fn swapfloat(f: *mut f32);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cst_wave_struct {
    pub type_: *const ::std::os::raw::c_char,
    pub sample_rate: ::std::os::raw::c_int,
    pub num_samples: ::std::os::raw::c_int,
    pub num_channels: ::std::os::raw::c_int,
    pub samples: *mut ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_cst_wave_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_wave_struct>(),
        32usize,
        concat!("Size of: ", stringify!(cst_wave_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_wave_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_wave_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_wave_struct>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_wave_struct),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_wave_struct>())).sample_rate as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_wave_struct),
            "::",
            stringify!(sample_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_wave_struct>())).num_samples as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_wave_struct),
            "::",
            stringify!(num_samples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_wave_struct>())).num_channels as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_wave_struct),
            "::",
            stringify!(num_channels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_wave_struct>())).samples as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_wave_struct),
            "::",
            stringify!(samples)
        )
    );
}
pub type cst_wave = cst_wave_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cst_wave_header_struct {
    pub type_: *const ::std::os::raw::c_char,
    pub hsize: ::std::os::raw::c_int,
    pub num_bytes: ::std::os::raw::c_int,
    pub sample_rate: ::std::os::raw::c_int,
    pub num_samples: ::std::os::raw::c_int,
    pub num_channels: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cst_wave_header_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_wave_header_struct>(),
        32usize,
        concat!("Size of: ", stringify!(cst_wave_header_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_wave_header_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_wave_header_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_wave_header_struct>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_wave_header_struct),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_wave_header_struct>())).hsize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_wave_header_struct),
            "::",
            stringify!(hsize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_wave_header_struct>())).num_bytes as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_wave_header_struct),
            "::",
            stringify!(num_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_wave_header_struct>())).sample_rate as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_wave_header_struct),
            "::",
            stringify!(sample_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_wave_header_struct>())).num_samples as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_wave_header_struct),
            "::",
            stringify!(num_samples)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_wave_header_struct>())).num_channels as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_wave_header_struct),
            "::",
            stringify!(num_channels)
        )
    );
}
pub type cst_wave_header = cst_wave_header_struct;
extern "C" {
    pub fn new_wave() -> *mut cst_wave;
}
extern "C" {
    pub fn copy_wave(w: *const cst_wave) -> *mut cst_wave;
}
extern "C" {
    pub fn delete_wave(val: *mut cst_wave);
}
extern "C" {
    pub fn concat_wave(dest: *mut cst_wave, src: *const cst_wave) -> *mut cst_wave;
}
extern "C" {
    pub fn cst_wave_save(
        w: *mut cst_wave,
        filename: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cst_wave_save_riff(
        w: *mut cst_wave,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cst_wave_save_raw(
        w: *mut cst_wave,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cst_wave_append_riff(
        w: *mut cst_wave,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cst_wave_save_riff_fd(w: *mut cst_wave, fd: cst_file) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cst_wave_save_raw_fd(w: *mut cst_wave, fd: cst_file) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cst_wave_load(
        w: *mut cst_wave,
        filename: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cst_wave_load_riff(
        w: *mut cst_wave,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cst_wave_load_raw(
        w: *mut cst_wave,
        filename: *const ::std::os::raw::c_char,
        bo: *const ::std::os::raw::c_char,
        sample_rate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cst_wave_load_riff_header(
        header: *mut cst_wave_header,
        fd: cst_file,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cst_wave_load_riff_fd(w: *mut cst_wave, fd: cst_file) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cst_wave_load_raw_fd(
        w: *mut cst_wave,
        fd: cst_file,
        bo: *const ::std::os::raw::c_char,
        sample_rate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cst_wave_resize(
        w: *mut cst_wave,
        samples: ::std::os::raw::c_int,
        num_channels: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn cst_wave_resample(w: *mut cst_wave, sample_rate: ::std::os::raw::c_int);
}
extern "C" {
    pub fn cst_wave_rescale(w: *mut cst_wave, factor: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cst_rateconv_struct {
    pub channels: ::std::os::raw::c_int,
    pub up: ::std::os::raw::c_int,
    pub down: ::std::os::raw::c_int,
    pub gain: f64,
    pub lag: ::std::os::raw::c_int,
    pub sin: *mut ::std::os::raw::c_int,
    pub sout: *mut ::std::os::raw::c_int,
    pub coep: *mut ::std::os::raw::c_int,
    pub insize: ::std::os::raw::c_int,
    pub outsize: ::std::os::raw::c_int,
    pub incount: ::std::os::raw::c_int,
    pub len: ::std::os::raw::c_int,
    pub fsin: f64,
    pub fgk: f64,
    pub fgg: f64,
    pub inbaseidx: ::std::os::raw::c_int,
    pub inoffset: ::std::os::raw::c_int,
    pub cycctr: ::std::os::raw::c_int,
    pub outidx: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cst_rateconv_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_rateconv_struct>(),
        112usize,
        concat!("Size of: ", stringify!(cst_rateconv_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_rateconv_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_rateconv_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_rateconv_struct>())).channels as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_rateconv_struct),
            "::",
            stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_rateconv_struct>())).up as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_rateconv_struct),
            "::",
            stringify!(up)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_rateconv_struct>())).down as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_rateconv_struct),
            "::",
            stringify!(down)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_rateconv_struct>())).gain as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_rateconv_struct),
            "::",
            stringify!(gain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_rateconv_struct>())).lag as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_rateconv_struct),
            "::",
            stringify!(lag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_rateconv_struct>())).sin as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_rateconv_struct),
            "::",
            stringify!(sin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_rateconv_struct>())).sout as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_rateconv_struct),
            "::",
            stringify!(sout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_rateconv_struct>())).coep as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_rateconv_struct),
            "::",
            stringify!(coep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_rateconv_struct>())).insize as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_rateconv_struct),
            "::",
            stringify!(insize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_rateconv_struct>())).outsize as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_rateconv_struct),
            "::",
            stringify!(outsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_rateconv_struct>())).incount as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_rateconv_struct),
            "::",
            stringify!(incount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_rateconv_struct>())).len as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_rateconv_struct),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_rateconv_struct>())).fsin as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_rateconv_struct),
            "::",
            stringify!(fsin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_rateconv_struct>())).fgk as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_rateconv_struct),
            "::",
            stringify!(fgk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_rateconv_struct>())).fgg as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_rateconv_struct),
            "::",
            stringify!(fgg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_rateconv_struct>())).inbaseidx as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_rateconv_struct),
            "::",
            stringify!(inbaseidx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_rateconv_struct>())).inoffset as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_rateconv_struct),
            "::",
            stringify!(inoffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_rateconv_struct>())).cycctr as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_rateconv_struct),
            "::",
            stringify!(cycctr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_rateconv_struct>())).outidx as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_rateconv_struct),
            "::",
            stringify!(outidx)
        )
    );
}
pub type cst_rateconv = cst_rateconv_struct;
extern "C" {
    pub fn new_rateconv(
        up: ::std::os::raw::c_int,
        down: ::std::os::raw::c_int,
        channels: ::std::os::raw::c_int,
    ) -> *mut cst_rateconv;
}
extern "C" {
    pub fn delete_rateconv(filt: *mut cst_rateconv);
}
extern "C" {
    pub fn cst_rateconv_in(
        filt: *mut cst_rateconv,
        inptr: *const ::std::os::raw::c_short,
        max: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cst_rateconv_leadout(filt: *mut cst_rateconv) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cst_rateconv_out(
        filt: *mut cst_rateconv,
        outptr: *mut ::std::os::raw::c_short,
        max: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct snd_header {
    pub magic: ::std::os::raw::c_uint,
    pub hdr_size: ::std::os::raw::c_uint,
    pub data_size: ::std::os::raw::c_int,
    pub encoding: ::std::os::raw::c_uint,
    pub sample_rate: ::std::os::raw::c_uint,
    pub channels: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_snd_header() {
    assert_eq!(
        ::std::mem::size_of::<snd_header>(),
        24usize,
        concat!("Size of: ", stringify!(snd_header))
    );
    assert_eq!(
        ::std::mem::align_of::<snd_header>(),
        4usize,
        concat!("Alignment of ", stringify!(snd_header))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_header>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_header),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_header>())).hdr_size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_header),
            "::",
            stringify!(hdr_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_header>())).data_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_header),
            "::",
            stringify!(data_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_header>())).encoding as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_header),
            "::",
            stringify!(encoding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_header>())).sample_rate as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_header),
            "::",
            stringify!(sample_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<snd_header>())).channels as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(snd_header),
            "::",
            stringify!(channels)
        )
    );
}
extern "C" {
    pub fn cst_short_to_ulaw(sample: ::std::os::raw::c_short) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn cst_ulaw_to_short(ulawbyte: ::std::os::raw::c_uchar) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn cst_g721_decode(
        actual_size: *mut ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        packed_residual: *const ::std::os::raw::c_uchar,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn cst_g721_encode(
        packed_size: *mut ::std::os::raw::c_int,
        actual_size: ::std::os::raw::c_int,
        unpacked_residual: *const ::std::os::raw::c_uchar,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub static cst_val_type_wave: ::std::os::raw::c_int;
}
extern "C" {
    pub fn val_wave(v: *const cst_val) -> *mut cst_wave;
}
extern "C" {
    pub fn wave_val(v: *const cst_wave) -> *mut cst_val;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cst_track_struct {
    pub type_: *const ::std::os::raw::c_char,
    pub num_frames: ::std::os::raw::c_int,
    pub num_channels: ::std::os::raw::c_int,
    pub times: *mut f32,
    pub frames: *mut *mut f32,
}
#[test]
fn bindgen_test_layout_cst_track_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_track_struct>(),
        32usize,
        concat!("Size of: ", stringify!(cst_track_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_track_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_track_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_track_struct>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_track_struct),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_track_struct>())).num_frames as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_track_struct),
            "::",
            stringify!(num_frames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_track_struct>())).num_channels as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_track_struct),
            "::",
            stringify!(num_channels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_track_struct>())).times as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_track_struct),
            "::",
            stringify!(times)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_track_struct>())).frames as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_track_struct),
            "::",
            stringify!(frames)
        )
    );
}
pub type cst_track = cst_track_struct;
extern "C" {
    pub fn new_track() -> *mut cst_track;
}
extern "C" {
    pub fn delete_track(val: *mut cst_track);
}
extern "C" {
    pub fn track_frame_shift(t: *mut cst_track, frame: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn cst_track_resize(
        t: *mut cst_track,
        num_frames: ::std::os::raw::c_int,
        num_channels: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn cst_track_copy(t: *const cst_track) -> *mut cst_track;
}
extern "C" {
    pub fn cst_track_save_est(
        t: *mut cst_track,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cst_track_save_est_binary(
        t: *mut cst_track,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cst_track_load_est(
        t: *mut cst_track,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static cst_val_type_track: ::std::os::raw::c_int;
}
extern "C" {
    pub fn val_track(v: *const cst_val) -> *mut cst_track;
}
extern "C" {
    pub fn track_val(v: *const cst_track) -> *mut cst_val;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cst_cart_node_struct {
    pub feat: ::std::os::raw::c_uchar,
    pub op: ::std::os::raw::c_uchar,
    pub no_node: ::std::os::raw::c_ushort,
    pub val: *const cst_val,
}
#[test]
fn bindgen_test_layout_cst_cart_node_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_cart_node_struct>(),
        16usize,
        concat!("Size of: ", stringify!(cst_cart_node_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_cart_node_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_cart_node_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_cart_node_struct>())).feat as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_cart_node_struct),
            "::",
            stringify!(feat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_cart_node_struct>())).op as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_cart_node_struct),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_cart_node_struct>())).no_node as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_cart_node_struct),
            "::",
            stringify!(no_node)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_cart_node_struct>())).val as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_cart_node_struct),
            "::",
            stringify!(val)
        )
    );
}
pub type cst_cart_node = cst_cart_node_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cst_cart_struct {
    pub rule_table: *const cst_cart_node,
    pub feat_table: *const *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_cst_cart_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_cart_struct>(),
        16usize,
        concat!("Size of: ", stringify!(cst_cart_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_cart_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_cart_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_cart_struct>())).rule_table as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_cart_struct),
            "::",
            stringify!(rule_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_cart_struct>())).feat_table as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_cart_struct),
            "::",
            stringify!(feat_table)
        )
    );
}
pub type cst_cart = cst_cart_struct;
extern "C" {
    pub fn delete_cart(c: *mut cst_cart);
}
extern "C" {
    pub static cst_val_type_cart: ::std::os::raw::c_int;
}
extern "C" {
    pub fn val_cart(v: *const cst_val) -> *mut cst_cart;
}
extern "C" {
    pub fn cart_val(v: *const cst_cart) -> *mut cst_val;
}
extern "C" {
    pub fn cart_interpret(item: *mut cst_item, tree: *const cst_cart) -> *const cst_val;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cst_phoneset_struct {
    pub name: *const ::std::os::raw::c_char,
    pub featnames: *const *const ::std::os::raw::c_char,
    pub featvals: *const *const cst_val,
    pub phonenames: *const *const ::std::os::raw::c_char,
    pub silence: *const ::std::os::raw::c_char,
    pub num_phones: ::std::os::raw::c_int,
    pub fvtable: *const *const ::std::os::raw::c_int,
    pub freeable: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cst_phoneset_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_phoneset_struct>(),
        64usize,
        concat!("Size of: ", stringify!(cst_phoneset_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_phoneset_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_phoneset_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_phoneset_struct>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_phoneset_struct),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_phoneset_struct>())).featnames as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_phoneset_struct),
            "::",
            stringify!(featnames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_phoneset_struct>())).featvals as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_phoneset_struct),
            "::",
            stringify!(featvals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_phoneset_struct>())).phonenames as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_phoneset_struct),
            "::",
            stringify!(phonenames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_phoneset_struct>())).silence as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_phoneset_struct),
            "::",
            stringify!(silence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_phoneset_struct>())).num_phones as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_phoneset_struct),
            "::",
            stringify!(num_phones)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_phoneset_struct>())).fvtable as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_phoneset_struct),
            "::",
            stringify!(fvtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_phoneset_struct>())).freeable as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_phoneset_struct),
            "::",
            stringify!(freeable)
        )
    );
}
pub type cst_phoneset = cst_phoneset_struct;
extern "C" {
    pub fn new_phoneset() -> *mut cst_phoneset;
}
extern "C" {
    pub fn delete_phoneset(u: *const cst_phoneset);
}
extern "C" {
    pub fn phone_feature(
        ps: *const cst_phoneset,
        phonename: *const ::std::os::raw::c_char,
        featname: *const ::std::os::raw::c_char,
    ) -> *const cst_val;
}
extern "C" {
    pub fn phone_feature_string(
        ps: *const cst_phoneset,
        phonename: *const ::std::os::raw::c_char,
        featname: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn phone_id(
        ps: *const cst_phoneset,
        phonename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn phone_feat_id(
        ps: *const cst_phoneset,
        featname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn item_phoneset(i: *const cst_item) -> *const cst_phoneset;
}
extern "C" {
    pub static cst_val_type_phoneset: ::std::os::raw::c_int;
}
extern "C" {
    pub fn val_phoneset(v: *const cst_val) -> *mut cst_phoneset;
}
extern "C" {
    pub fn phoneset_val(v: *const cst_phoneset) -> *mut cst_val;
}
pub type cst_lts_addr = ::std::os::raw::c_ushort;
pub type cst_lts_phone = ::std::os::raw::c_int;
pub type cst_lts_feat = ::std::os::raw::c_uchar;
pub type cst_lts_letter = ::std::os::raw::c_uchar;
pub type cst_lts_model = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cst_lts_rules_struct {
    pub name: *mut ::std::os::raw::c_char,
    pub letter_index: *const cst_lts_addr,
    pub models: *const cst_lts_model,
    pub phone_table: *const *const ::std::os::raw::c_char,
    pub context_window_size: ::std::os::raw::c_int,
    pub context_extra_feats: ::std::os::raw::c_int,
    pub letter_table: *const *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_cst_lts_rules_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_lts_rules_struct>(),
        48usize,
        concat!("Size of: ", stringify!(cst_lts_rules_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_lts_rules_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_lts_rules_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_lts_rules_struct>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_lts_rules_struct),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_lts_rules_struct>())).letter_index as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_lts_rules_struct),
            "::",
            stringify!(letter_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_lts_rules_struct>())).models as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_lts_rules_struct),
            "::",
            stringify!(models)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_lts_rules_struct>())).phone_table as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_lts_rules_struct),
            "::",
            stringify!(phone_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_lts_rules_struct>())).context_window_size as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_lts_rules_struct),
            "::",
            stringify!(context_window_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_lts_rules_struct>())).context_extra_feats as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_lts_rules_struct),
            "::",
            stringify!(context_extra_feats)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_lts_rules_struct>())).letter_table as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_lts_rules_struct),
            "::",
            stringify!(letter_table)
        )
    );
}
pub type cst_lts_rules = cst_lts_rules_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cst_lts_rule_struct {
    pub feat: cst_lts_feat,
    pub val: cst_lts_letter,
    pub qtrue: cst_lts_addr,
    pub qfalse: cst_lts_addr,
}
#[test]
fn bindgen_test_layout_cst_lts_rule_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_lts_rule_struct>(),
        6usize,
        concat!("Size of: ", stringify!(cst_lts_rule_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_lts_rule_struct>(),
        2usize,
        concat!("Alignment of ", stringify!(cst_lts_rule_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_lts_rule_struct>())).feat as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_lts_rule_struct),
            "::",
            stringify!(feat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_lts_rule_struct>())).val as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_lts_rule_struct),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_lts_rule_struct>())).qtrue as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_lts_rule_struct),
            "::",
            stringify!(qtrue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_lts_rule_struct>())).qfalse as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_lts_rule_struct),
            "::",
            stringify!(qfalse)
        )
    );
}
pub type cst_lts_rule = cst_lts_rule_struct;
extern "C" {
    pub fn new_lts_rules() -> *mut cst_lts_rules;
}
extern "C" {
    pub fn lts_apply(
        word: *const ::std::os::raw::c_char,
        feats: *const ::std::os::raw::c_char,
        r: *const cst_lts_rules,
    ) -> *mut cst_val;
}
extern "C" {
    pub fn lts_apply_val(
        wlist: *const cst_val,
        feats: *const ::std::os::raw::c_char,
        r: *const cst_lts_rules,
    ) -> *mut cst_val;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lexicon_struct {
    pub name: *const ::std::os::raw::c_char,
    pub num_entries: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_uchar,
    pub num_bytes: ::std::os::raw::c_int,
    pub phone_table: *mut *mut ::std::os::raw::c_char,
    pub lts_rule_set: *mut cst_lts_rules,
    pub syl_boundary: ::std::option::Option<
        unsafe extern "C" fn(i: *const cst_item, p: *const cst_val) -> ::std::os::raw::c_int,
    >,
    pub lts_function: ::std::option::Option<
        unsafe extern "C" fn(
            l: *const lexicon_struct,
            word: *const ::std::os::raw::c_char,
            pos: *const ::std::os::raw::c_char,
            feats: *const cst_features,
        ) -> *mut cst_val,
    >,
    pub addenda: *mut *mut *mut ::std::os::raw::c_char,
    pub phone_hufftable: *const *const ::std::os::raw::c_char,
    pub entry_hufftable: *const *const ::std::os::raw::c_char,
    pub postlex:
        ::std::option::Option<unsafe extern "C" fn(u: *mut cst_utterance) -> *mut cst_utterance>,
    pub lex_addenda: *mut cst_val,
}
#[test]
fn bindgen_test_layout_lexicon_struct() {
    assert_eq!(
        ::std::mem::size_of::<lexicon_struct>(),
        104usize,
        concat!("Size of: ", stringify!(lexicon_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<lexicon_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(lexicon_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lexicon_struct>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lexicon_struct),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lexicon_struct>())).num_entries as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lexicon_struct),
            "::",
            stringify!(num_entries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lexicon_struct>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lexicon_struct),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lexicon_struct>())).num_bytes as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lexicon_struct),
            "::",
            stringify!(num_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lexicon_struct>())).phone_table as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(lexicon_struct),
            "::",
            stringify!(phone_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lexicon_struct>())).lts_rule_set as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(lexicon_struct),
            "::",
            stringify!(lts_rule_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lexicon_struct>())).syl_boundary as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(lexicon_struct),
            "::",
            stringify!(syl_boundary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lexicon_struct>())).lts_function as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(lexicon_struct),
            "::",
            stringify!(lts_function)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lexicon_struct>())).addenda as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(lexicon_struct),
            "::",
            stringify!(addenda)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lexicon_struct>())).phone_hufftable as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(lexicon_struct),
            "::",
            stringify!(phone_hufftable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lexicon_struct>())).entry_hufftable as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(lexicon_struct),
            "::",
            stringify!(entry_hufftable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lexicon_struct>())).postlex as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(lexicon_struct),
            "::",
            stringify!(postlex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lexicon_struct>())).lex_addenda as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(lexicon_struct),
            "::",
            stringify!(lex_addenda)
        )
    );
}
pub type cst_lexicon = lexicon_struct;
extern "C" {
    pub fn new_lexicon() -> *mut cst_lexicon;
}
extern "C" {
    pub fn delete_lexicon(lex: *mut cst_lexicon);
}
extern "C" {
    pub fn cst_lex_make_entry(lex: *const cst_lexicon, entry: *const cst_string) -> *mut cst_val;
}
extern "C" {
    pub fn cst_lex_load_addenda(
        lex: *const cst_lexicon,
        lexfile: *const ::std::os::raw::c_char,
    ) -> *mut cst_val;
}
extern "C" {
    pub fn lex_lookup(
        l: *const cst_lexicon,
        word: *const ::std::os::raw::c_char,
        pos: *const ::std::os::raw::c_char,
        feats: *const cst_features,
    ) -> *mut cst_val;
}
extern "C" {
    pub fn in_lex(
        l: *const cst_lexicon,
        word: *const ::std::os::raw::c_char,
        pos: *const ::std::os::raw::c_char,
        feats: *const cst_features,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static cst_val_type_lexicon: ::std::os::raw::c_int;
}
extern "C" {
    pub fn val_lexicon(v: *const cst_val) -> *mut cst_lexicon;
}
extern "C" {
    pub fn lexicon_val(v: *const cst_lexicon) -> *mut cst_val;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cst_voice_struct {
    pub name: *const ::std::os::raw::c_char,
    pub features: *mut cst_features,
    pub ffunctions: *mut cst_features,
    pub utt_init: ::std::option::Option<
        unsafe extern "C" fn(u: *mut cst_utterance, v: *mut cst_voice_struct) -> *mut cst_utterance,
    >,
}
#[test]
fn bindgen_test_layout_cst_voice_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_voice_struct>(),
        32usize,
        concat!("Size of: ", stringify!(cst_voice_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_voice_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_voice_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_voice_struct>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_voice_struct),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_voice_struct>())).features as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_voice_struct),
            "::",
            stringify!(features)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_voice_struct>())).ffunctions as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_voice_struct),
            "::",
            stringify!(ffunctions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_voice_struct>())).utt_init as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_voice_struct),
            "::",
            stringify!(utt_init)
        )
    );
}
pub type cst_voice = cst_voice_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cst_lang_struct {
    pub lang: *const ::std::os::raw::c_char,
    pub lang_init: ::std::option::Option<unsafe extern "C" fn(vox: *mut cst_voice)>,
    pub lex_init: ::std::option::Option<unsafe extern "C" fn() -> *mut cst_lexicon>,
}
#[test]
fn bindgen_test_layout_cst_lang_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_lang_struct>(),
        24usize,
        concat!("Size of: ", stringify!(cst_lang_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_lang_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_lang_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_lang_struct>())).lang as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_lang_struct),
            "::",
            stringify!(lang)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_lang_struct>())).lang_init as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_lang_struct),
            "::",
            stringify!(lang_init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_lang_struct>())).lex_init as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_lang_struct),
            "::",
            stringify!(lex_init)
        )
    );
}
pub type cst_lang = cst_lang_struct;
extern "C" {
    pub fn new_voice() -> *mut cst_voice;
}
extern "C" {
    pub fn delete_voice(u: *mut cst_voice);
}
extern "C" {
    pub static cst_val_type_voice: ::std::os::raw::c_int;
}
extern "C" {
    pub fn val_voice(v: *const cst_val) -> *mut cst_voice;
}
extern "C" {
    pub fn voice_val(v: *const cst_voice) -> *mut cst_val;
}
pub const cst_audiofmt_CST_AUDIO_LINEAR16: cst_audiofmt = 0;
pub const cst_audiofmt_CST_AUDIO_LINEAR8: cst_audiofmt = 1;
pub const cst_audiofmt_CST_AUDIO_MULAW: cst_audiofmt = 2;
pub type cst_audiofmt = ::std::os::raw::c_uint;
extern "C" {
    pub fn audio_bps(fmt: cst_audiofmt) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cst_audiodev_struct {
    pub sps: ::std::os::raw::c_int,
    pub real_sps: ::std::os::raw::c_int,
    pub channels: ::std::os::raw::c_int,
    pub real_channels: ::std::os::raw::c_int,
    pub fmt: cst_audiofmt,
    pub real_fmt: cst_audiofmt,
    pub byteswap: ::std::os::raw::c_int,
    pub rateconv: *mut cst_rateconv,
    pub platform_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cst_audiodev_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_audiodev_struct>(),
        48usize,
        concat!("Size of: ", stringify!(cst_audiodev_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_audiodev_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_audiodev_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_audiodev_struct>())).sps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_audiodev_struct),
            "::",
            stringify!(sps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_audiodev_struct>())).real_sps as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_audiodev_struct),
            "::",
            stringify!(real_sps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_audiodev_struct>())).channels as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_audiodev_struct),
            "::",
            stringify!(channels)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_audiodev_struct>())).real_channels as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_audiodev_struct),
            "::",
            stringify!(real_channels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_audiodev_struct>())).fmt as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_audiodev_struct),
            "::",
            stringify!(fmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_audiodev_struct>())).real_fmt as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_audiodev_struct),
            "::",
            stringify!(real_fmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_audiodev_struct>())).byteswap as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_audiodev_struct),
            "::",
            stringify!(byteswap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_audiodev_struct>())).rateconv as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_audiodev_struct),
            "::",
            stringify!(rateconv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_audiodev_struct>())).platform_data as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_audiodev_struct),
            "::",
            stringify!(platform_data)
        )
    );
}
pub type cst_audiodev = cst_audiodev_struct;
extern "C" {
    pub fn audio_open(
        sps: ::std::os::raw::c_int,
        channels: ::std::os::raw::c_int,
        fmt: cst_audiofmt,
    ) -> *mut cst_audiodev;
}
extern "C" {
    pub fn audio_close(ad: *mut cst_audiodev) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audio_write(
        ad: *mut cst_audiodev,
        buff: *mut ::std::os::raw::c_void,
        num_bytes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audio_flush(ad: *mut cst_audiodev) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audio_drain(ad: *mut cst_audiodev) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn play_wave(w: *mut cst_wave) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn play_wave_sync(
        w: *mut cst_wave,
        rel: *mut cst_relation,
        call_back: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut cst_item) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn play_wave_client(
        w: *mut cst_wave,
        servername: *const ::std::os::raw::c_char,
        port: ::std::os::raw::c_int,
        encoding: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn auserver(port: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn play_wave_device(w: *mut cst_wave, ad: *mut cst_audiodev) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audio_open_file(
        sps: ::std::os::raw::c_int,
        channels: ::std::os::raw::c_int,
        fmt: cst_audiofmt,
        filename: *const ::std::os::raw::c_char,
    ) -> *mut cst_audiodev;
}
extern "C" {
    pub fn audio_close_file(ad: *mut cst_audiodev) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audio_write_file(
        ad: *mut cst_audiodev,
        buff: *mut ::std::os::raw::c_void,
        num_bytes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audio_drain_file(ad: *mut cst_audiodev) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audio_flush_file(ad: *mut cst_audiodev) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cst_audio_streaming_info_struct {
    pub min_buffsize: ::std::os::raw::c_int,
    pub asc: ::std::option::Option<
        unsafe extern "C" fn(
            w: *const cst_wave,
            start: ::std::os::raw::c_int,
            size: ::std::os::raw::c_int,
            last: ::std::os::raw::c_int,
            asi: *mut cst_audio_streaming_info_struct,
        ) -> ::std::os::raw::c_int,
    >,
    pub utt: *const cst_utterance,
    pub item: *const cst_item,
    pub userdata: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cst_audio_streaming_info_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_audio_streaming_info_struct>(),
        40usize,
        concat!("Size of: ", stringify!(cst_audio_streaming_info_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_audio_streaming_info_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_audio_streaming_info_struct))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_audio_streaming_info_struct>())).min_buffsize as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_audio_streaming_info_struct),
            "::",
            stringify!(min_buffsize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_audio_streaming_info_struct>())).asc as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_audio_streaming_info_struct),
            "::",
            stringify!(asc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_audio_streaming_info_struct>())).utt as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_audio_streaming_info_struct),
            "::",
            stringify!(utt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_audio_streaming_info_struct>())).item as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_audio_streaming_info_struct),
            "::",
            stringify!(item)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_audio_streaming_info_struct>())).userdata as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_audio_streaming_info_struct),
            "::",
            stringify!(userdata)
        )
    );
}
pub type cst_audio_streaming_info = cst_audio_streaming_info_struct;
extern "C" {
    pub fn new_audio_streaming_info() -> *mut cst_audio_streaming_info;
}
extern "C" {
    pub fn delete_audio_streaming_info(asi: *mut cst_audio_streaming_info);
}
extern "C" {
    pub static cst_val_type_audio_streaming_info: ::std::os::raw::c_int;
}
extern "C" {
    pub fn val_audio_streaming_info(v: *const cst_val) -> *mut cst_audio_streaming_info;
}
extern "C" {
    pub fn audio_streaming_info_val(v: *const cst_audio_streaming_info) -> *mut cst_val;
}
pub type cst_audio_stream_callback = ::std::option::Option<
    unsafe extern "C" fn(
        w: *const cst_wave,
        start: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        last: ::std::os::raw::c_int,
        asi: *mut cst_audio_streaming_info,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn audio_stream_chunk(
        w: *const cst_wave,
        start: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        last: ::std::os::raw::c_int,
        asi: *mut cst_audio_streaming_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utt_set_wave(u: *mut cst_utterance, w: *mut cst_wave) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utt_wave(u: *mut cst_utterance) -> *mut cst_wave;
}
extern "C" {
    pub fn utt_input_text(u: *mut cst_utterance) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn utt_set_input_text(
        u: *mut cst_utterance,
        text: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cst_tokenstream_struct {
    pub fd: cst_file,
    pub file_pos: ::std::os::raw::c_int,
    pub line_number: ::std::os::raw::c_int,
    pub eof_flag: ::std::os::raw::c_int,
    pub string_buffer: *mut cst_string,
    pub current_char: ::std::os::raw::c_int,
    pub token_pos: ::std::os::raw::c_int,
    pub ws_max: ::std::os::raw::c_int,
    pub whitespace: *mut cst_string,
    pub prep_max: ::std::os::raw::c_int,
    pub prepunctuation: *mut cst_string,
    pub token_max: ::std::os::raw::c_int,
    pub token: *mut cst_string,
    pub postp_max: ::std::os::raw::c_int,
    pub postpunctuation: *mut cst_string,
    pub tags: *mut cst_features,
    pub utf8_explode_mode: ::std::os::raw::c_int,
    pub streamtype_data: *mut ::std::os::raw::c_void,
    pub p_whitespacesymbols: *const cst_string,
    pub p_singlecharsymbols: *const cst_string,
    pub p_prepunctuationsymbols: *const cst_string,
    pub p_postpunctuationsymbols: *const cst_string,
    pub charclass: [cst_string; 256usize],
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            ts: *mut cst_tokenstream_struct,
            filename: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub close: ::std::option::Option<unsafe extern "C" fn(ts: *mut cst_tokenstream_struct)>,
    pub eof: ::std::option::Option<
        unsafe extern "C" fn(ts: *mut cst_tokenstream_struct) -> ::std::os::raw::c_int,
    >,
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(
            ts: *mut cst_tokenstream_struct,
            pos: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tell: ::std::option::Option<
        unsafe extern "C" fn(ts: *mut cst_tokenstream_struct) -> ::std::os::raw::c_int,
    >,
    pub size: ::std::option::Option<
        unsafe extern "C" fn(ts: *mut cst_tokenstream_struct) -> ::std::os::raw::c_int,
    >,
    pub getc: ::std::option::Option<
        unsafe extern "C" fn(ts: *mut cst_tokenstream_struct) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_cst_tokenstream_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_tokenstream_struct>(),
        472usize,
        concat!("Size of: ", stringify!(cst_tokenstream_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_tokenstream_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_tokenstream_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_tokenstream_struct>())).fd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_tokenstream_struct),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_tokenstream_struct>())).file_pos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_tokenstream_struct),
            "::",
            stringify!(file_pos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_tokenstream_struct>())).line_number as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_tokenstream_struct),
            "::",
            stringify!(line_number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_tokenstream_struct>())).eof_flag as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_tokenstream_struct),
            "::",
            stringify!(eof_flag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_tokenstream_struct>())).string_buffer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_tokenstream_struct),
            "::",
            stringify!(string_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_tokenstream_struct>())).current_char as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_tokenstream_struct),
            "::",
            stringify!(current_char)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_tokenstream_struct>())).token_pos as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_tokenstream_struct),
            "::",
            stringify!(token_pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_tokenstream_struct>())).ws_max as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_tokenstream_struct),
            "::",
            stringify!(ws_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_tokenstream_struct>())).whitespace as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_tokenstream_struct),
            "::",
            stringify!(whitespace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_tokenstream_struct>())).prep_max as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_tokenstream_struct),
            "::",
            stringify!(prep_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_tokenstream_struct>())).prepunctuation as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_tokenstream_struct),
            "::",
            stringify!(prepunctuation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_tokenstream_struct>())).token_max as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_tokenstream_struct),
            "::",
            stringify!(token_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_tokenstream_struct>())).token as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_tokenstream_struct),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_tokenstream_struct>())).postp_max as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_tokenstream_struct),
            "::",
            stringify!(postp_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_tokenstream_struct>())).postpunctuation as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_tokenstream_struct),
            "::",
            stringify!(postpunctuation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_tokenstream_struct>())).tags as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_tokenstream_struct),
            "::",
            stringify!(tags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_tokenstream_struct>())).utf8_explode_mode as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_tokenstream_struct),
            "::",
            stringify!(utf8_explode_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_tokenstream_struct>())).streamtype_data as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_tokenstream_struct),
            "::",
            stringify!(streamtype_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_tokenstream_struct>())).p_whitespacesymbols as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_tokenstream_struct),
            "::",
            stringify!(p_whitespacesymbols)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_tokenstream_struct>())).p_singlecharsymbols as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_tokenstream_struct),
            "::",
            stringify!(p_singlecharsymbols)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_tokenstream_struct>())).p_prepunctuationsymbols as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_tokenstream_struct),
            "::",
            stringify!(p_prepunctuationsymbols)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_tokenstream_struct>())).p_postpunctuationsymbols as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_tokenstream_struct),
            "::",
            stringify!(p_postpunctuationsymbols)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_tokenstream_struct>())).charclass as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_tokenstream_struct),
            "::",
            stringify!(charclass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_tokenstream_struct>())).open as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_tokenstream_struct),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_tokenstream_struct>())).close as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_tokenstream_struct),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_tokenstream_struct>())).eof as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_tokenstream_struct),
            "::",
            stringify!(eof)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_tokenstream_struct>())).seek as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_tokenstream_struct),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_tokenstream_struct>())).tell as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_tokenstream_struct),
            "::",
            stringify!(tell)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_tokenstream_struct>())).size as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_tokenstream_struct),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_tokenstream_struct>())).getc as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_tokenstream_struct),
            "::",
            stringify!(getc)
        )
    );
}
pub type cst_tokenstream = cst_tokenstream_struct;
extern "C" {
    pub static cst_ts_default_whitespacesymbols: *const cst_string;
}
extern "C" {
    pub static cst_ts_default_prepunctuationsymbols: *const cst_string;
}
extern "C" {
    pub static cst_ts_default_postpunctuationsymbols: *const cst_string;
}
extern "C" {
    pub static cst_ts_default_singlecharsymbols: *const cst_string;
}
extern "C" {
    pub fn ts_open(
        filename: *const ::std::os::raw::c_char,
        whitespacesymbols: *const cst_string,
        singlecharsymbols: *const cst_string,
        prepunctsymbols: *const cst_string,
        postpunctsymbols: *const cst_string,
    ) -> *mut cst_tokenstream;
}
extern "C" {
    pub fn ts_open_string(
        string: *const cst_string,
        whitespacesymbols: *const cst_string,
        singlecharsymbols: *const cst_string,
        prepunctsymbols: *const cst_string,
        postpunctsymbols: *const cst_string,
    ) -> *mut cst_tokenstream;
}
extern "C" {
    pub fn ts_open_generic(
        filename: *const ::std::os::raw::c_char,
        whitespacesymbols: *const cst_string,
        singlecharsymbols: *const cst_string,
        prepunctsymbols: *const cst_string,
        postpunctsymbols: *const cst_string,
        streamtype_data: *mut ::std::os::raw::c_void,
        open: ::std::option::Option<
            unsafe extern "C" fn(
                ts: *mut cst_tokenstream,
                filename: *const ::std::os::raw::c_char,
            ) -> ::std::os::raw::c_int,
        >,
        close: ::std::option::Option<unsafe extern "C" fn(ts: *mut cst_tokenstream)>,
        eof: ::std::option::Option<
            unsafe extern "C" fn(ts: *mut cst_tokenstream) -> ::std::os::raw::c_int,
        >,
        seek: ::std::option::Option<
            unsafe extern "C" fn(
                ts: *mut cst_tokenstream,
                pos: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        tell: ::std::option::Option<
            unsafe extern "C" fn(ts: *mut cst_tokenstream) -> ::std::os::raw::c_int,
        >,
        size: ::std::option::Option<
            unsafe extern "C" fn(ts: *mut cst_tokenstream) -> ::std::os::raw::c_int,
        >,
        getc: ::std::option::Option<
            unsafe extern "C" fn(ts: *mut cst_tokenstream) -> ::std::os::raw::c_int,
        >,
    ) -> *mut cst_tokenstream;
}
extern "C" {
    pub fn ts_close(ts: *mut cst_tokenstream);
}
extern "C" {
    pub fn ts_utf8_sequence_length(c0: ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ts_eof(ts: *mut cst_tokenstream) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ts_get(ts: *mut cst_tokenstream) -> *const cst_string;
}
extern "C" {
    pub fn ts_get_quoted_token(
        ts: *mut cst_tokenstream,
        quote: ::std::os::raw::c_char,
        escape: ::std::os::raw::c_char,
    ) -> *const cst_string;
}
extern "C" {
    pub fn private_ts_getc(ts: *mut cst_tokenstream) -> cst_string;
}
extern "C" {
    pub fn set_charclasses(
        ts: *mut cst_tokenstream,
        whitespace: *const cst_string,
        singlecharsymbols: *const cst_string,
        prepunctuation: *const cst_string,
        postpunctuation: *const cst_string,
    );
}
extern "C" {
    pub fn ts_read(
        buff: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
        num: ::std::os::raw::c_int,
        ts: *mut cst_tokenstream,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ts_set_stream_pos(
        ts: *mut cst_tokenstream,
        pos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ts_get_stream_pos(ts: *mut cst_tokenstream) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ts_get_stream_size(ts: *mut cst_tokenstream) -> ::std::os::raw::c_int;
}
pub type cst_breakfunc = ::std::option::Option<
    unsafe extern "C" fn(
        ts: *mut cst_tokenstream,
        token: *const ::std::os::raw::c_char,
        tokens: *mut cst_relation,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub static cst_val_type_breakfunc: ::std::os::raw::c_int;
}
extern "C" {
    pub fn val_breakfunc(v: *const cst_val) -> cst_breakfunc;
}
extern "C" {
    pub fn breakfunc_val(v: cst_breakfunc) -> *mut cst_val;
}
extern "C" {
    pub fn default_utt_break(
        ts: *mut cst_tokenstream,
        token: *const ::std::os::raw::c_char,
        tokens: *mut cst_relation,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utt_init(u: *mut cst_utterance, vox: *mut cst_voice) -> *mut cst_utterance;
}
extern "C" {
    pub fn utt_synth(u: *mut cst_utterance) -> *mut cst_utterance;
}
extern "C" {
    pub fn utt_synth_phones(u: *mut cst_utterance) -> *mut cst_utterance;
}
extern "C" {
    pub fn utt_synth_tokens(u: *mut cst_utterance) -> *mut cst_utterance;
}
extern "C" {
    pub fn utt_synth_wave(w: *mut cst_wave, v: *mut cst_voice) -> *mut cst_utterance;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cst_dur_stats_struct {
    pub phone: *const ::std::os::raw::c_char,
    pub mean: f32,
    pub stddev: f32,
}
#[test]
fn bindgen_test_layout_cst_dur_stats_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_dur_stats_struct>(),
        16usize,
        concat!("Size of: ", stringify!(cst_dur_stats_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_dur_stats_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_dur_stats_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_dur_stats_struct>())).phone as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_dur_stats_struct),
            "::",
            stringify!(phone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_dur_stats_struct>())).mean as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_dur_stats_struct),
            "::",
            stringify!(mean)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_dur_stats_struct>())).stddev as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_dur_stats_struct),
            "::",
            stringify!(stddev)
        )
    );
}
pub type dur_stat = cst_dur_stats_struct;
pub type dur_stats = *mut dur_stat;
extern "C" {
    pub static cst_val_type_dur_stats: ::std::os::raw::c_int;
}
extern "C" {
    pub fn val_dur_stats(v: *const cst_val) -> *mut dur_stats;
}
extern "C" {
    pub fn dur_stats_val(v: *const dur_stats) -> *mut cst_val;
}
extern "C" {
    pub fn default_segmentanalysis(u: *mut cst_utterance) -> *mut cst_utterance;
}
extern "C" {
    pub fn default_tokenization(u: *mut cst_utterance) -> *mut cst_utterance;
}
extern "C" {
    pub fn default_textanalysis(u: *mut cst_utterance) -> *mut cst_utterance;
}
extern "C" {
    pub fn default_tokentowords(i: *mut cst_item) -> *mut cst_val;
}
extern "C" {
    pub fn default_phrasing(u: *mut cst_utterance) -> *mut cst_utterance;
}
extern "C" {
    pub fn default_pos_tagger(u: *mut cst_utterance) -> *mut cst_utterance;
}
extern "C" {
    pub fn default_lexical_insertion(u: *mut cst_utterance) -> *mut cst_utterance;
}
extern "C" {
    pub fn default_pause_insertion(u: *mut cst_utterance) -> *mut cst_utterance;
}
extern "C" {
    pub fn cart_intonation(u: *mut cst_utterance) -> *mut cst_utterance;
}
extern "C" {
    pub fn cart_duration(u: *mut cst_utterance) -> *mut cst_utterance;
}
extern "C" {
    pub fn flat_prosody(u: *mut cst_utterance) -> *mut cst_utterance;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cst_synth_module_struct {
    pub hookname: *const ::std::os::raw::c_char,
    pub defhook: cst_uttfunc,
}
#[test]
fn bindgen_test_layout_cst_synth_module_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_synth_module_struct>(),
        16usize,
        concat!("Size of: ", stringify!(cst_synth_module_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_synth_module_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_synth_module_struct))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_synth_module_struct>())).hookname as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_synth_module_struct),
            "::",
            stringify!(hookname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_synth_module_struct>())).defhook as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_synth_module_struct),
            "::",
            stringify!(defhook)
        )
    );
}
pub type cst_synth_module = cst_synth_module_struct;
extern "C" {
    pub fn apply_synth_module(
        u: *mut cst_utterance,
        mod_: *const cst_synth_module,
    ) -> *mut cst_utterance;
}
extern "C" {
    pub fn apply_synth_method(
        u: *mut cst_utterance,
        meth: *const cst_synth_module,
    ) -> *mut cst_utterance;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cst_sts_struct {
    pub frame: *const ::std::os::raw::c_ushort,
    pub size: ::std::os::raw::c_int,
    pub residual: *const ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_cst_sts_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_sts_struct>(),
        24usize,
        concat!("Size of: ", stringify!(cst_sts_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_sts_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_sts_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_sts_struct>())).frame as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_sts_struct),
            "::",
            stringify!(frame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_sts_struct>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_sts_struct),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_sts_struct>())).residual as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_sts_struct),
            "::",
            stringify!(residual)
        )
    );
}
pub type cst_sts = cst_sts_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cst_sts_paged_struct {
    pub frame_offset: ::std::os::raw::c_uint,
    pub res_size: ::std::os::raw::c_ushort,
    pub res_offset: ::std::os::raw::c_uint,
    pub frame_page: *const ::std::os::raw::c_ushort,
    pub res_page: *const ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_cst_sts_paged_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_sts_paged_struct>(),
        32usize,
        concat!("Size of: ", stringify!(cst_sts_paged_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_sts_paged_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_sts_paged_struct))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_sts_paged_struct>())).frame_offset as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_sts_paged_struct),
            "::",
            stringify!(frame_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_sts_paged_struct>())).res_size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_sts_paged_struct),
            "::",
            stringify!(res_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_sts_paged_struct>())).res_offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_sts_paged_struct),
            "::",
            stringify!(res_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_sts_paged_struct>())).frame_page as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_sts_paged_struct),
            "::",
            stringify!(frame_page)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_sts_paged_struct>())).res_page as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_sts_paged_struct),
            "::",
            stringify!(res_page)
        )
    );
}
pub type cst_sts_paged = cst_sts_paged_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cst_sts_list_struct {
    pub sts: *const cst_sts,
    pub sts_paged: *const cst_sts_paged,
    pub frames: *const ::std::os::raw::c_ushort,
    pub residuals: *const ::std::os::raw::c_uchar,
    pub resoffs: *const ::std::os::raw::c_uint,
    pub ressizes: *const ::std::os::raw::c_uchar,
    pub num_sts: ::std::os::raw::c_int,
    pub num_channels: ::std::os::raw::c_int,
    pub sample_rate: ::std::os::raw::c_int,
    pub coeff_min: f32,
    pub coeff_range: f32,
    pub codec: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_cst_sts_list_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_sts_list_struct>(),
        80usize,
        concat!("Size of: ", stringify!(cst_sts_list_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_sts_list_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_sts_list_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_sts_list_struct>())).sts as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_sts_list_struct),
            "::",
            stringify!(sts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_sts_list_struct>())).sts_paged as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_sts_list_struct),
            "::",
            stringify!(sts_paged)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_sts_list_struct>())).frames as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_sts_list_struct),
            "::",
            stringify!(frames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_sts_list_struct>())).residuals as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_sts_list_struct),
            "::",
            stringify!(residuals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_sts_list_struct>())).resoffs as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_sts_list_struct),
            "::",
            stringify!(resoffs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_sts_list_struct>())).ressizes as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_sts_list_struct),
            "::",
            stringify!(ressizes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_sts_list_struct>())).num_sts as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_sts_list_struct),
            "::",
            stringify!(num_sts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_sts_list_struct>())).num_channels as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_sts_list_struct),
            "::",
            stringify!(num_channels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_sts_list_struct>())).sample_rate as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_sts_list_struct),
            "::",
            stringify!(sample_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_sts_list_struct>())).coeff_min as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_sts_list_struct),
            "::",
            stringify!(coeff_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_sts_list_struct>())).coeff_range as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_sts_list_struct),
            "::",
            stringify!(coeff_range)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_sts_list_struct>())).codec as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_sts_list_struct),
            "::",
            stringify!(codec)
        )
    );
}
pub type cst_sts_list = cst_sts_list_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cst_lpcres_struct {
    pub frames: *mut *const ::std::os::raw::c_ushort,
    pub times: *mut ::std::os::raw::c_int,
    pub num_frames: ::std::os::raw::c_int,
    pub num_channels: ::std::os::raw::c_int,
    pub lpc_min: f32,
    pub lpc_range: f32,
    pub num_samples: ::std::os::raw::c_int,
    pub sample_rate: ::std::os::raw::c_int,
    pub sizes: *mut ::std::os::raw::c_int,
    pub residual: *mut ::std::os::raw::c_uchar,
    pub asi: *mut cst_audio_streaming_info,
    pub packed_residuals: *mut *const ::std::os::raw::c_uchar,
    pub delayed_decoding: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cst_lpcres_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_lpcres_struct>(),
        80usize,
        concat!("Size of: ", stringify!(cst_lpcres_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_lpcres_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_lpcres_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_lpcres_struct>())).frames as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_lpcres_struct),
            "::",
            stringify!(frames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_lpcres_struct>())).times as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_lpcres_struct),
            "::",
            stringify!(times)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_lpcres_struct>())).num_frames as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_lpcres_struct),
            "::",
            stringify!(num_frames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_lpcres_struct>())).num_channels as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_lpcres_struct),
            "::",
            stringify!(num_channels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_lpcres_struct>())).lpc_min as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_lpcres_struct),
            "::",
            stringify!(lpc_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_lpcres_struct>())).lpc_range as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_lpcres_struct),
            "::",
            stringify!(lpc_range)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_lpcres_struct>())).num_samples as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_lpcres_struct),
            "::",
            stringify!(num_samples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_lpcres_struct>())).sample_rate as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_lpcres_struct),
            "::",
            stringify!(sample_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_lpcres_struct>())).sizes as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_lpcres_struct),
            "::",
            stringify!(sizes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_lpcres_struct>())).residual as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_lpcres_struct),
            "::",
            stringify!(residual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_lpcres_struct>())).asi as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_lpcres_struct),
            "::",
            stringify!(asi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_lpcres_struct>())).packed_residuals as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_lpcres_struct),
            "::",
            stringify!(packed_residuals)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_lpcres_struct>())).delayed_decoding as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_lpcres_struct),
            "::",
            stringify!(delayed_decoding)
        )
    );
}
pub type cst_lpcres = cst_lpcres_struct;
extern "C" {
    pub fn new_lpcres() -> *mut cst_lpcres;
}
extern "C" {
    pub fn delete_lpcres(l: *mut cst_lpcres);
}
extern "C" {
    pub fn lpcres_frame_shift(t: *mut cst_lpcres, frame: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn lpcres_resize_frames(l: *mut cst_lpcres, num_frames: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lpcres_resize_samples(l: *mut cst_lpcres, num_samples: ::std::os::raw::c_int);
}
extern "C" {
    pub fn new_sts_list() -> *mut cst_sts_list;
}
extern "C" {
    pub fn delete_sts_list(l: *mut cst_sts_list);
}
extern "C" {
    pub fn get_sts_frame(
        sts_list: *const cst_sts_list,
        frame: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn get_sts_residual(
        sts_list: *const cst_sts_list,
        frame: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn get_sts_residual_fixed(
        sts_list: *const cst_sts_list,
        frame: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn get_frame_size(
        sts_list: *const cst_sts_list,
        frame: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_unit_size(
        s: *const cst_sts_list,
        start: ::std::os::raw::c_int,
        end: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static cst_val_type_lpcres: ::std::os::raw::c_int;
}
extern "C" {
    pub fn val_lpcres(v: *const cst_val) -> *mut cst_lpcres;
}
extern "C" {
    pub fn lpcres_val(v: *const cst_lpcres) -> *mut cst_val;
}
extern "C" {
    pub static cst_val_type_sts_list: ::std::os::raw::c_int;
}
extern "C" {
    pub fn val_sts_list(v: *const cst_val) -> *mut cst_sts_list;
}
extern "C" {
    pub fn sts_list_val(v: *const cst_sts_list) -> *mut cst_val;
}
extern "C" {
    pub fn join_units(utt: *mut cst_utterance) -> *mut cst_utterance;
}
extern "C" {
    pub fn join_units_windowed(utt: *mut cst_utterance) -> *mut cst_utterance;
}
extern "C" {
    pub fn join_units_simple(utt: *mut cst_utterance) -> *mut cst_utterance;
}
extern "C" {
    pub fn join_units_modified_lpc(utt: *mut cst_utterance) -> *mut cst_utterance;
}
extern "C" {
    pub fn asis_to_pm(utt: *mut cst_utterance) -> *mut cst_utterance;
}
extern "C" {
    pub fn f0_targets_to_pm(utt: *mut cst_utterance) -> *mut cst_utterance;
}
extern "C" {
    pub fn concat_units(utt: *mut cst_utterance) -> *mut cst_utterance;
}
extern "C" {
    pub fn add_residual(
        targ_size: ::std::os::raw::c_int,
        targ_residual: *mut ::std::os::raw::c_uchar,
        unit_size: ::std::os::raw::c_int,
        unit_residual: *const ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn add_residual_pulse(
        targ_size: ::std::os::raw::c_int,
        targ_residual: *mut ::std::os::raw::c_uchar,
        unit_size: ::std::os::raw::c_int,
        unit_residual: *const ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub static mut flite_voice_list: *mut cst_val;
}
extern "C" {
    pub static mut flite_lang_list: [cst_lang; 20usize];
}
extern "C" {
    pub static mut flite_lang_list_length: ::std::os::raw::c_int;
}
extern "C" {
    pub fn flite_init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flite_voice_select(name: *const ::std::os::raw::c_char) -> *mut cst_voice;
}
extern "C" {
    pub fn flite_voice_load(voice_filename: *const ::std::os::raw::c_char) -> *mut cst_voice;
}
extern "C" {
    pub fn flite_voice_dump(
        voice: *mut cst_voice,
        voice_filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flite_file_to_speech(
        filename: *const ::std::os::raw::c_char,
        voice: *mut cst_voice,
        outtype: *const ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn flite_text_to_speech(
        text: *const ::std::os::raw::c_char,
        voice: *mut cst_voice,
        outtype: *const ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn flite_phones_to_speech(
        text: *const ::std::os::raw::c_char,
        voice: *mut cst_voice,
        outtype: *const ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn flite_ssml_file_to_speech(
        filename: *const ::std::os::raw::c_char,
        voice: *mut cst_voice,
        outtype: *const ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn flite_ssml_text_to_speech(
        text: *const ::std::os::raw::c_char,
        voice: *mut cst_voice,
        outtype: *const ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn flite_voice_add_lex_addenda(
        v: *mut cst_voice,
        lexfile: *const cst_string,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flite_text_to_wave(
        text: *const ::std::os::raw::c_char,
        voice: *mut cst_voice,
    ) -> *mut cst_wave;
}
extern "C" {
    pub fn flite_synth_text(
        text: *const ::std::os::raw::c_char,
        voice: *mut cst_voice,
    ) -> *mut cst_utterance;
}
extern "C" {
    pub fn flite_synth_phones(
        phones: *const ::std::os::raw::c_char,
        voice: *mut cst_voice,
    ) -> *mut cst_utterance;
}
extern "C" {
    pub fn flite_ts_to_speech(
        ts: *mut cst_tokenstream,
        voice: *mut cst_voice,
        outtype: *const ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn flite_do_synth(
        u: *mut cst_utterance,
        voice: *mut cst_voice,
        synth: cst_uttfunc,
    ) -> *mut cst_utterance;
}
extern "C" {
    pub fn flite_process_output(
        u: *mut cst_utterance,
        outtype: *const ::std::os::raw::c_char,
        append: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn flite_mmap_clunit_voxdata(
        voxdir: *const ::std::os::raw::c_char,
        voice: *mut cst_voice,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flite_munmap_clunit_voxdata(voice: *mut cst_voice) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flite_get_param_int(
        f: *const cst_features,
        name: *const ::std::os::raw::c_char,
        def: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flite_get_param_float(
        f: *const cst_features,
        name: *const ::std::os::raw::c_char,
        def: f32,
    ) -> f32;
}
extern "C" {
    pub fn flite_get_param_string(
        f: *const cst_features,
        name: *const ::std::os::raw::c_char,
        def: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn flite_get_param_val(
        f: *const cst_features,
        name: *const ::std::os::raw::c_char,
        def: *mut cst_val,
    ) -> *const cst_val;
}
extern "C" {
    pub fn flite_feat_set_int(
        f: *mut cst_features,
        name: *const ::std::os::raw::c_char,
        v: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn flite_feat_set_float(f: *mut cst_features, name: *const ::std::os::raw::c_char, v: f32);
}
extern "C" {
    pub fn flite_feat_set_string(
        f: *mut cst_features,
        name: *const ::std::os::raw::c_char,
        v: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn flite_feat_set(
        f: *mut cst_features,
        name: *const ::std::os::raw::c_char,
        v: *const cst_val,
    );
}
extern "C" {
    pub fn flite_feat_remove(
        f: *mut cst_features,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flite_ffeature_string(
        item: *const cst_item,
        featpath: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn flite_ffeature_int(
        item: *const cst_item,
        featpath: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flite_ffeature_float(
        item: *const cst_item,
        featpath: *const ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn flite_ffeature(
        item: *const cst_item,
        featpath: *const ::std::os::raw::c_char,
    ) -> *const cst_val;
}
extern "C" {
    pub fn flite_path_to_item(
        item: *const cst_item,
        featpath: *const ::std::os::raw::c_char,
    ) -> *mut cst_item;
}
extern "C" {
    pub fn flite_add_voice(voice: *mut cst_voice) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flite_add_lang(
        langname: *const ::std::os::raw::c_char,
        lang_init: ::std::option::Option<unsafe extern "C" fn(vox: *mut cst_voice)>,
        lex_init: ::std::option::Option<unsafe extern "C" fn() -> *mut cst_lexicon>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf8_grapheme_lang_init(v: *mut cst_voice);
}
extern "C" {
    pub fn utf8_grapheme_lex_init() -> *mut cst_lexicon;
}
extern "C" {
    pub fn usenglish_init(v: *mut cst_voice);
}
extern "C" {
    pub fn us_f0_model(u: *mut cst_utterance) -> *mut cst_utterance;
}
extern "C" {
    pub static us_phoneset: cst_phoneset;
}
extern "C" {
    pub static us_phrasing_cart: cst_cart;
}
extern "C" {
    pub static us_int_accent_cart: cst_cart;
}
extern "C" {
    pub static us_int_tone_cart: cst_cart;
}
extern "C" {
    pub static us_durz_cart: cst_cart;
}
extern "C" {
    pub static us_pos_cart: cst_cart;
}
extern "C" {
    pub static mut us_dur_stats: [*const dur_stat; 0usize];
}
extern "C" {
    pub fn cmu_lex_init() -> *mut cst_lexicon;
}
extern "C" {
    pub fn cmu_postlex(u: *mut cst_utterance) -> *mut cst_utterance;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cst_diphone_entry_struct {
    pub name: *const ::std::os::raw::c_char,
    pub start_pm: ::std::os::raw::c_ushort,
    pub pb_pm: ::std::os::raw::c_uchar,
    pub end_pm: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_cst_diphone_entry_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_diphone_entry_struct>(),
        16usize,
        concat!("Size of: ", stringify!(cst_diphone_entry_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_diphone_entry_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_diphone_entry_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_diphone_entry_struct>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_diphone_entry_struct),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_diphone_entry_struct>())).start_pm as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_diphone_entry_struct),
            "::",
            stringify!(start_pm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_diphone_entry_struct>())).pb_pm as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_diphone_entry_struct),
            "::",
            stringify!(pb_pm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_diphone_entry_struct>())).end_pm as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_diphone_entry_struct),
            "::",
            stringify!(end_pm)
        )
    );
}
pub type cst_diphone_entry = cst_diphone_entry_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cst_diphone_db_struct {
    pub name: *const ::std::os::raw::c_char,
    pub num_entries: ::std::os::raw::c_int,
    pub diphones: *const cst_diphone_entry,
    pub sts: *const cst_sts_list,
}
#[test]
fn bindgen_test_layout_cst_diphone_db_struct() {
    assert_eq!(
        ::std::mem::size_of::<cst_diphone_db_struct>(),
        32usize,
        concat!("Size of: ", stringify!(cst_diphone_db_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<cst_diphone_db_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(cst_diphone_db_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_diphone_db_struct>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_diphone_db_struct),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cst_diphone_db_struct>())).num_entries as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_diphone_db_struct),
            "::",
            stringify!(num_entries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_diphone_db_struct>())).diphones as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_diphone_db_struct),
            "::",
            stringify!(diphones)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cst_diphone_db_struct>())).sts as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cst_diphone_db_struct),
            "::",
            stringify!(sts)
        )
    );
}
pub type cst_diphone_db = cst_diphone_db_struct;
extern "C" {
    pub static cst_val_type_diphone_db: ::std::os::raw::c_int;
}
extern "C" {
    pub fn val_diphone_db(v: *const cst_val) -> *mut cst_diphone_db;
}
extern "C" {
    pub fn diphone_db_val(v: *const cst_diphone_db) -> *mut cst_val;
}
extern "C" {
    pub fn diphone_synth(utt: *mut cst_utterance) -> *mut cst_utterance;
}
extern "C" {
    pub fn get_diphone_units(utt: *mut cst_utterance) -> *mut cst_utterance;
}
extern "C" {
    pub static mut cmu_us_kal_db: cst_diphone_db;
}
extern "C" {
    pub static mut cmu_us_kal_diphone: *mut cst_voice;
}
extern "C" {
    pub fn register_cmu_us_kal(voxdir: *const ::std::os::raw::c_char) -> *mut cst_voice;
}
extern "C" {
    pub fn unregister_cmu_us_kal(v: *mut cst_voice);
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
pub type __uint128_t = u128;
